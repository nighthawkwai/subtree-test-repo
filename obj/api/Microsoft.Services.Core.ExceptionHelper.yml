### YamlMime:ManagedReference
items:
- uid: Microsoft.Services.Core.ExceptionHelper
  commentId: T:Microsoft.Services.Core.ExceptionHelper
  id: ExceptionHelper
  parent: Microsoft.Services.Core
  children:
  - Microsoft.Services.Core.ExceptionHelper.FindFirstExceptionOfType``1(System.Exception)
  - Microsoft.Services.Core.ExceptionHelper.GetIndentedExceptionString(System.Exception,System.Int32,System.Boolean)
  langs:
  - csharp
  - vb
  name: ExceptionHelper
  nameWithType: ExceptionHelper
  fullName: Microsoft.Services.Core.ExceptionHelper
  type: Class
  source:
    remote:
      path: Product/source/Microsoft.Services.Core/ExceptionHelper.cs
      branch: master
      repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
    id: ExceptionHelper
    path: Product/source/Microsoft.Services.Core/ExceptionHelper.cs
    startLine: 10
  assemblies:
  - Microsoft.Services.Core
  namespace: Microsoft.Services.Core
  summary: "\nA bunch of generic exception helper methods to help users search through and format exception strings\n"
  example: []
  syntax:
    content: public static class ExceptionHelper
    content.vb: Public Module ExceptionHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Services.Core.ExceptionHelper.FindFirstExceptionOfType``1(System.Exception)
  commentId: M:Microsoft.Services.Core.ExceptionHelper.FindFirstExceptionOfType``1(System.Exception)
  id: FindFirstExceptionOfType``1(System.Exception)
  parent: Microsoft.Services.Core.ExceptionHelper
  langs:
  - csharp
  - vb
  name: FindFirstExceptionOfType<T>(Exception)
  nameWithType: ExceptionHelper.FindFirstExceptionOfType<T>(Exception)
  fullName: Microsoft.Services.Core.ExceptionHelper.FindFirstExceptionOfType<T>(System.Exception)
  type: Method
  source:
    remote:
      path: Product/source/Microsoft.Services.Core/ExceptionHelper.cs
      branch: master
      repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
    id: FindFirstExceptionOfType
    path: Product/source/Microsoft.Services.Core/ExceptionHelper.cs
    startLine: 19
  assemblies:
  - Microsoft.Services.Core
  namespace: Microsoft.Services.Core
  summary: "\nFinds the first type of the exception of <typeparam name=\"T\"></typeparam> in the exception tree.\nReturns null if not found\n"
  example: []
  syntax:
    content: 'public static T FindFirstExceptionOfType<T>(Exception e)where T : Exception'
    content.vb: Public Shared Function FindFirstExceptionOfType(Of T As Exception)(e As Exception) As T
    parameters:
    - id: e
      type: System.Exception
      description: The e.
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
  nameWithType.vb: ExceptionHelper.FindFirstExceptionOfType(Of T)(Exception)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Services.Core.ExceptionHelper.FindFirstExceptionOfType(Of T)(System.Exception)
  name.vb: FindFirstExceptionOfType(Of T)(Exception)
- uid: Microsoft.Services.Core.ExceptionHelper.GetIndentedExceptionString(System.Exception,System.Int32,System.Boolean)
  commentId: M:Microsoft.Services.Core.ExceptionHelper.GetIndentedExceptionString(System.Exception,System.Int32,System.Boolean)
  id: GetIndentedExceptionString(System.Exception,System.Int32,System.Boolean)
  parent: Microsoft.Services.Core.ExceptionHelper
  langs:
  - csharp
  - vb
  name: GetIndentedExceptionString(Exception, Int32, Boolean)
  nameWithType: ExceptionHelper.GetIndentedExceptionString(Exception, Int32, Boolean)
  fullName: Microsoft.Services.Core.ExceptionHelper.GetIndentedExceptionString(System.Exception, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Product/source/Microsoft.Services.Core/ExceptionHelper.cs
      branch: master
      repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
    id: GetIndentedExceptionString
    path: Product/source/Microsoft.Services.Core/ExceptionHelper.cs
    startLine: 53
  assemblies:
  - Microsoft.Services.Core
  namespace: Microsoft.Services.Core
  summary: "\nGets a tab indented exception string of the form\n<code>    \"An exception has occurred: ...\n        Stacktrace:\n         An Exception has occurred: ... \n            Stacktrace:\n         An Exception has occurred: ... \n            Stacktrace:</code>\n"
  example: []
  syntax:
    content: public static string GetIndentedExceptionString(Exception e, int tabIndent = 0, bool traverseExceptionTree = false)
    content.vb: Public Shared Function GetIndentedExceptionString(e As Exception, tabIndent As Integer = 0, traverseExceptionTree As Boolean = False) As String
    parameters:
    - id: e
      type: System.Exception
      description: The e.
    - id: tabIndent
      type: System.Int32
      description: The tab indent.
    - id: traverseExceptionTree
      type: System.Boolean
      description: if set to <code>true</code> [traverse exception tree].
    return:
      type: System.String
      description: ''
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Services.Core
  commentId: N:Microsoft.Services.Core
  isExternal: false
  name: Microsoft.Services.Core
  nameWithType: Microsoft.Services.Core
  fullName: Microsoft.Services.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
