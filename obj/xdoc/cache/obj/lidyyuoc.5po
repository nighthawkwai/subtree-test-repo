id: Microsoft.Services.Core
language: CSharp
name:
  Default: Microsoft.Services.Core
qualifiedName:
  Default: Microsoft.Services.Core
type: Assembly
modifiers: {}
items:
- id: Microsoft.Services.Core
  commentId: N:Microsoft.Services.Core
  language: CSharp
  name:
    CSharp: Microsoft.Services.Core
    VB: Microsoft.Services.Core
  nameWithType:
    CSharp: Microsoft.Services.Core
    VB: Microsoft.Services.Core
  qualifiedName:
    CSharp: Microsoft.Services.Core
    VB: Microsoft.Services.Core
  type: Namespace
  assemblies:
  - Microsoft.Services.Core
  modifiers: {}
  items:
  - id: Microsoft.Services.Core.ExceptionHelper
    commentId: T:Microsoft.Services.Core.ExceptionHelper
    language: CSharp
    name:
      CSharp: ExceptionHelper
      VB: ExceptionHelper
    nameWithType:
      CSharp: ExceptionHelper
      VB: ExceptionHelper
    qualifiedName:
      CSharp: Microsoft.Services.Core.ExceptionHelper
      VB: Microsoft.Services.Core.ExceptionHelper
    type: Class
    assemblies:
    - Microsoft.Services.Core
    namespace: Microsoft.Services.Core
    source:
      remote:
        path: Product/source/Microsoft.Services.Core/ExceptionHelper.cs
        branch: master
        repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
      id: ExceptionHelper
      path: Product/source/Microsoft.Services.Core/ExceptionHelper.cs
      startLine: 10
    summary: "\nA bunch of generic exception helper methods to help users search through and format exception strings\n"
    example: []
    syntax:
      content:
        CSharp: public static class ExceptionHelper
        VB: Public Module ExceptionHelper
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Microsoft.Services.Core.ExceptionHelper.FindFirstExceptionOfType``1(System.Exception)
      commentId: M:Microsoft.Services.Core.ExceptionHelper.FindFirstExceptionOfType``1(System.Exception)
      language: CSharp
      name:
        CSharp: FindFirstExceptionOfType<T>(Exception)
        VB: FindFirstExceptionOfType(Of T)(Exception)
      nameWithType:
        CSharp: ExceptionHelper.FindFirstExceptionOfType<T>(Exception)
        VB: ExceptionHelper.FindFirstExceptionOfType(Of T)(Exception)
      qualifiedName:
        CSharp: Microsoft.Services.Core.ExceptionHelper.FindFirstExceptionOfType<T>(System.Exception)
        VB: Microsoft.Services.Core.ExceptionHelper.FindFirstExceptionOfType(Of T)(System.Exception)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/ExceptionHelper.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: FindFirstExceptionOfType
        path: Product/source/Microsoft.Services.Core/ExceptionHelper.cs
        startLine: 19
      summary: "\nFinds the first type of the exception of <typeparam name=\"T\"></typeparam> in the exception tree.\nReturns null if not found\n"
      example: []
      syntax:
        content:
          CSharp: 'public static T FindFirstExceptionOfType<T>(Exception e)where T : Exception'
          VB: Public Shared Function FindFirstExceptionOfType(Of T As Exception)(e As Exception) As T
        parameters:
        - id: e
          type: System.Exception
          description: The e.
        typeParameters:
        - id: T
          description: ''
        return:
          type: '{T}'
          description: ''
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Microsoft.Services.Core.ExceptionHelper.GetIndentedExceptionString(System.Exception,System.Int32,System.Boolean)
      commentId: M:Microsoft.Services.Core.ExceptionHelper.GetIndentedExceptionString(System.Exception,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: GetIndentedExceptionString(Exception, Int32, Boolean)
        VB: GetIndentedExceptionString(Exception, Int32, Boolean)
      nameWithType:
        CSharp: ExceptionHelper.GetIndentedExceptionString(Exception, Int32, Boolean)
        VB: ExceptionHelper.GetIndentedExceptionString(Exception, Int32, Boolean)
      qualifiedName:
        CSharp: Microsoft.Services.Core.ExceptionHelper.GetIndentedExceptionString(System.Exception, System.Int32, System.Boolean)
        VB: Microsoft.Services.Core.ExceptionHelper.GetIndentedExceptionString(System.Exception, System.Int32, System.Boolean)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/ExceptionHelper.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: GetIndentedExceptionString
        path: Product/source/Microsoft.Services.Core/ExceptionHelper.cs
        startLine: 53
      summary: "\nGets a tab indented exception string of the form\n<code>    \"An exception has occurred: ...\n        Stacktrace:\n         An Exception has occurred: ... \n            Stacktrace:\n         An Exception has occurred: ... \n            Stacktrace:</code>\n"
      example: []
      syntax:
        content:
          CSharp: public static string GetIndentedExceptionString(Exception e, int tabIndent = 0, bool traverseExceptionTree = false)
          VB: Public Shared Function GetIndentedExceptionString(e As Exception, tabIndent As Integer = 0, traverseExceptionTree As Boolean = False) As String
        parameters:
        - id: e
          type: System.Exception
          description: The e.
        - id: tabIndent
          type: System.Int32
          description: The tab indent.
        - id: traverseExceptionTree
          type: System.Boolean
          description: if set to <code>true</code> [traverse exception tree].
        return:
          type: System.String
          description: ''
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Microsoft.Services.Core.Contract
    commentId: T:Microsoft.Services.Core.Contract
    language: CSharp
    name:
      CSharp: Contract
      VB: Contract
    nameWithType:
      CSharp: Contract
      VB: Contract
    qualifiedName:
      CSharp: Microsoft.Services.Core.Contract
      VB: Microsoft.Services.Core.Contract
    type: Class
    assemblies:
    - Microsoft.Services.Core
    namespace: Microsoft.Services.Core
    source:
      remote:
        path: Product/source/Microsoft.Services.Core/Contract.cs
        branch: master
        repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
      id: Contract
      path: Product/source/Microsoft.Services.Core/Contract.cs
      startLine: 9
    summary: "\nA contracts class that mimics the functionality of <xref href=\"System.Diagnostics.Contracts\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: public static class Contract
        VB: Public Module Contract
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Microsoft.Services.Core.Contract.Requires``1(System.Boolean,System.String,System.String,System.String,System.Int32)
      commentId: M:Microsoft.Services.Core.Contract.Requires``1(System.Boolean,System.String,System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: Requires<T>(Boolean, String, String, String, Int32)
        VB: Requires(Of T)(Boolean, String, String, String, Int32)
      nameWithType:
        CSharp: Contract.Requires<T>(Boolean, String, String, String, Int32)
        VB: Contract.Requires(Of T)(Boolean, String, String, String, Int32)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Contract.Requires<T>(System.Boolean, System.String, System.String, System.String, System.Int32)
        VB: Microsoft.Services.Core.Contract.Requires(Of T)(System.Boolean, System.String, System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Contract.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: Requires
        path: Product/source/Microsoft.Services.Core/Contract.cs
        startLine: 21
      summary: "\nWrapper for the CodeContract Requries method\n"
      example: []
      syntax:
        content:
          CSharp: 'public static void Requires<T>(bool condition, string message = null, string memberName = "", string sourceFilePath = "", int sourceLineNumber = 0)where T : Exception'
          VB: Public Shared Sub Requires(Of T As Exception)(condition As Boolean, message As String = Nothing, memberName As String = "", sourceFilePath As String = "", sourceLineNumber As Integer = 0)
        parameters:
        - id: condition
          type: System.Boolean
          description: ''
        - id: message
          type: System.String
          description: ''
        - id: memberName
          type: System.String
        - id: sourceFilePath
          type: System.String
        - id: sourceLineNumber
          type: System.Int32
        typeParameters:
        - id: T
          description: ''
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Microsoft.Services.Core.Contract.AssertNotNull(System.Object,System.String,System.String,System.String,System.String,System.Int32)
      commentId: M:Microsoft.Services.Core.Contract.AssertNotNull(System.Object,System.String,System.String,System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: AssertNotNull(Object, String, String, String, String, Int32)
        VB: AssertNotNull(Object, String, String, String, String, Int32)
      nameWithType:
        CSharp: Contract.AssertNotNull(Object, String, String, String, String, Int32)
        VB: Contract.AssertNotNull(Object, String, String, String, String, Int32)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Contract.AssertNotNull(System.Object, System.String, System.String, System.String, System.String, System.Int32)
        VB: Microsoft.Services.Core.Contract.AssertNotNull(System.Object, System.String, System.String, System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Contract.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: AssertNotNull
        path: Product/source/Microsoft.Services.Core/Contract.cs
        startLine: 50
      summary: "\nAsserts that arg is not null.\n"
      example: []
      syntax:
        content:
          CSharp: public static void AssertNotNull(object arg, string name, string message = null, string memberName = "", string sourceFilePath = "", int sourceLineNumber = 0)
          VB: Public Shared Sub AssertNotNull(arg As Object, name As String, message As String = Nothing, memberName As String = "", sourceFilePath As String = "", sourceLineNumber As Integer = 0)
        parameters:
        - id: arg
          type: System.Object
          description: The arg.
        - id: name
          type: System.String
        - id: message
          type: System.String
          description: The message.
        - id: memberName
          type: System.String
        - id: sourceFilePath
          type: System.String
        - id: sourceLineNumber
          type: System.Int32
      exceptions:
      - type: System.ArgumentNullException
        commentId: T:System.ArgumentNullException
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Microsoft.Services.Core.Contract.AssertArgNotNull(System.Object,System.String,System.String,System.String,System.Int32)
      commentId: M:Microsoft.Services.Core.Contract.AssertArgNotNull(System.Object,System.String,System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: AssertArgNotNull(Object, String, String, String, Int32)
        VB: AssertArgNotNull(Object, String, String, String, Int32)
      nameWithType:
        CSharp: Contract.AssertArgNotNull(Object, String, String, String, Int32)
        VB: Contract.AssertArgNotNull(Object, String, String, String, Int32)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Contract.AssertArgNotNull(System.Object, System.String, System.String, System.String, System.Int32)
        VB: Microsoft.Services.Core.Contract.AssertArgNotNull(System.Object, System.String, System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Contract.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: AssertArgNotNull
        path: Product/source/Microsoft.Services.Core/Contract.cs
        startLine: 68
      summary: "\nAsserts that arg is not null.\n"
      example: []
      syntax:
        content:
          CSharp: public static void AssertArgNotNull(object arg, string argname, string memberName = "", string sourceFilePath = "", int sourceLineNumber = 0)
          VB: Public Shared Sub AssertArgNotNull(arg As Object, argname As String, memberName As String = "", sourceFilePath As String = "", sourceLineNumber As Integer = 0)
        parameters:
        - id: arg
          type: System.Object
          description: The arg.
        - id: argname
          type: System.String
          description: The argname.
        - id: memberName
          type: System.String
        - id: sourceFilePath
          type: System.String
        - id: sourceLineNumber
          type: System.Int32
      exceptions:
      - type: System.ArgumentNullException
        commentId: T:System.ArgumentNullException
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Microsoft.Services.Core.Contract.AssertArgNotNullOrEmptyOrWhitespace(System.String,System.String,System.String,System.String,System.Int32)
      commentId: M:Microsoft.Services.Core.Contract.AssertArgNotNullOrEmptyOrWhitespace(System.String,System.String,System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: AssertArgNotNullOrEmptyOrWhitespace(String, String, String, String, Int32)
        VB: AssertArgNotNullOrEmptyOrWhitespace(String, String, String, String, Int32)
      nameWithType:
        CSharp: Contract.AssertArgNotNullOrEmptyOrWhitespace(String, String, String, String, Int32)
        VB: Contract.AssertArgNotNullOrEmptyOrWhitespace(String, String, String, String, Int32)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Contract.AssertArgNotNullOrEmptyOrWhitespace(System.String, System.String, System.String, System.String, System.Int32)
        VB: Microsoft.Services.Core.Contract.AssertArgNotNullOrEmptyOrWhitespace(System.String, System.String, System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Contract.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: AssertArgNotNullOrEmptyOrWhitespace
        path: Product/source/Microsoft.Services.Core/Contract.cs
        startLine: 86
      summary: "\nAsserts that arg is not null or empty or WhiteSpace.\n"
      example: []
      syntax:
        content:
          CSharp: public static void AssertArgNotNullOrEmptyOrWhitespace(string arg, string argname, string memberName = "", string sourceFilePath = "", int sourceLineNumber = 0)
          VB: Public Shared Sub AssertArgNotNullOrEmptyOrWhitespace(arg As String, argname As String, memberName As String = "", sourceFilePath As String = "", sourceLineNumber As Integer = 0)
        parameters:
        - id: arg
          type: System.String
          description: The arg.
        - id: argname
          type: System.String
          description: The argname.
        - id: memberName
          type: System.String
        - id: sourceFilePath
          type: System.String
        - id: sourceLineNumber
          type: System.Int32
      exceptions:
      - type: System.ArgumentNullException
        commentId: T:System.ArgumentNullException
      - type: System.ArgumentException
        commentId: T:System.ArgumentException
        description: Argument cannot be empty
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    references:
      System.Diagnostics.Contracts: 
  - id: Microsoft.Services.Core.StringValueAttribute
    commentId: T:Microsoft.Services.Core.StringValueAttribute
    language: CSharp
    name:
      CSharp: StringValueAttribute
      VB: StringValueAttribute
    nameWithType:
      CSharp: StringValueAttribute
      VB: StringValueAttribute
    qualifiedName:
      CSharp: Microsoft.Services.Core.StringValueAttribute
      VB: Microsoft.Services.Core.StringValueAttribute
    type: Class
    assemblies:
    - Microsoft.Services.Core
    namespace: Microsoft.Services.Core
    source:
      remote:
        path: Product/source/Microsoft.Services.Core/StringValueAttribute.cs
        branch: master
        repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
      id: StringValueAttribute
      path: Product/source/Microsoft.Services.Core/StringValueAttribute.cs
      startLine: 31
    summary: "\nString value attribute to decorate enum fields\n"
    example:
    - "\nHere is a minimal example of its usage\n<pre><code>public enum TestEnum\n {\n   [StringValue(\"Duck\")]\n   Value1,\n   [StringValue(\"Dog\")]\n   Value2,\n   [StringValue(\"Cow\")]\n   Value3\n }\n\nvoid Main()\n{\n   TestEnum.Value1.ToStringValue()\n}</code></pre>\n"
    syntax:
      content:
        CSharp: >-
          [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)]

          public sealed class StringValueAttribute : Attribute, _Attribute
        VB: >-
          <AttributeUsage(AttributeTargets.Field, AllowMultiple:=False)>

          Public NotInheritable Class StringValueAttribute

              Inherits Attribute

              Implements _Attribute
    inheritance:
    - System.Object
    - System.Attribute
    implements:
    - System.Runtime.InteropServices._Attribute
    inheritedMembers:
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.Equals(System.Object)
    - System.Attribute.GetHashCode
    - System.Attribute.Match(System.Object)
    - System.Attribute.IsDefaultAttribute
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    - System.Attribute.TypeId
    - System.Object.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: System.AttributeUsageAttribute
      ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
      arguments:
      - type: System.AttributeTargets
        value: 256
      namedArguments:
      - name: AllowMultiple
        type: System.Boolean
        value: false
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Microsoft.Services.Core.StringValueAttribute.Value
      commentId: P:Microsoft.Services.Core.StringValueAttribute.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: StringValueAttribute.Value
        VB: StringValueAttribute.Value
      qualifiedName:
        CSharp: Microsoft.Services.Core.StringValueAttribute.Value
        VB: Microsoft.Services.Core.StringValueAttribute.Value
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/StringValueAttribute.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: Value
        path: Product/source/Microsoft.Services.Core/StringValueAttribute.cs
        startLine: 34
      syntax:
        content:
          CSharp: public string Value { get; }
          VB: Public ReadOnly Property Value As String
        parameters: []
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Microsoft.Services.Core.StringValueAttribute.#ctor(System.String)
      commentId: M:Microsoft.Services.Core.StringValueAttribute.#ctor(System.String)
      language: CSharp
      name:
        CSharp: StringValueAttribute(String)
        VB: StringValueAttribute(String)
      nameWithType:
        CSharp: StringValueAttribute.StringValueAttribute(String)
        VB: StringValueAttribute.StringValueAttribute(String)
      qualifiedName:
        CSharp: Microsoft.Services.Core.StringValueAttribute.StringValueAttribute(System.String)
        VB: Microsoft.Services.Core.StringValueAttribute.StringValueAttribute(System.String)
      type: Constructor
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/StringValueAttribute.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: .ctor
        path: Product/source/Microsoft.Services.Core/StringValueAttribute.cs
        startLine: 36
      syntax:
        content:
          CSharp: public StringValueAttribute(string value)
          VB: Public Sub New(value As String)
        parameters:
        - id: value
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Microsoft.Services.Core.StringValueAttributeExtensions
    commentId: T:Microsoft.Services.Core.StringValueAttributeExtensions
    language: CSharp
    name:
      CSharp: StringValueAttributeExtensions
      VB: StringValueAttributeExtensions
    nameWithType:
      CSharp: StringValueAttributeExtensions
      VB: StringValueAttributeExtensions
    qualifiedName:
      CSharp: Microsoft.Services.Core.StringValueAttributeExtensions
      VB: Microsoft.Services.Core.StringValueAttributeExtensions
    type: Class
    assemblies:
    - Microsoft.Services.Core
    namespace: Microsoft.Services.Core
    source:
      remote:
        path: Product/source/Microsoft.Services.Core/StringValueAttributeExtensions.cs
        branch: master
        repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
      id: StringValueAttributeExtensions
      path: Product/source/Microsoft.Services.Core/StringValueAttributeExtensions.cs
      startLine: 27
    summary: "\nAn extensions class for operating with <xref href=\"Microsoft.Services.Core.StringValueAttribute\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example:
    - "\nHere is a minimal example of its usage\n<pre><code>public enum TestEnum\n {\n   [StringValue(\"Duck\")]\n   Value1,\n   [StringValue(\"Dog\")]\n   Value2,\n   [StringValue(\"Cow\")]\n   Value3\n }\n\nvoid Main()\n{\n   TestEnum.Value1.ToStringValue()\n}</code></pre>\n"
    syntax:
      content:
        CSharp: public static class StringValueAttributeExtensions
        VB: Public Module StringValueAttributeExtensions
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: Microsoft.Services.Core.StringValueAttributeExtensions.ToStringValue(System.Enum)
      commentId: M:Microsoft.Services.Core.StringValueAttributeExtensions.ToStringValue(System.Enum)
      language: CSharp
      name:
        CSharp: ToStringValue(Enum)
        VB: ToStringValue(Enum)
      nameWithType:
        CSharp: StringValueAttributeExtensions.ToStringValue(Enum)
        VB: StringValueAttributeExtensions.ToStringValue(Enum)
      qualifiedName:
        CSharp: Microsoft.Services.Core.StringValueAttributeExtensions.ToStringValue(System.Enum)
        VB: Microsoft.Services.Core.StringValueAttributeExtensions.ToStringValue(System.Enum)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/StringValueAttributeExtensions.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: ToStringValue
        path: Product/source/Microsoft.Services.Core/StringValueAttributeExtensions.cs
        startLine: 31
      syntax:
        content:
          CSharp: public static string ToStringValue(this Enum value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToStringValue(value As  Enum) As String
        parameters:
        - id: value
          type: System.Enum
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    references:
      Microsoft.Services.Core.StringValueAttribute: 
- id: Microsoft.Services.Core.Process
  commentId: N:Microsoft.Services.Core.Process
  language: CSharp
  name:
    CSharp: Microsoft.Services.Core.Process
    VB: Microsoft.Services.Core.Process
  nameWithType:
    CSharp: Microsoft.Services.Core.Process
    VB: Microsoft.Services.Core.Process
  qualifiedName:
    CSharp: Microsoft.Services.Core.Process
    VB: Microsoft.Services.Core.Process
  type: Namespace
  assemblies:
  - Microsoft.Services.Core
  modifiers: {}
  items:
  - id: Microsoft.Services.Core.Process.JobObject
    commentId: T:Microsoft.Services.Core.Process.JobObject
    language: CSharp
    name:
      CSharp: JobObject
      VB: JobObject
    nameWithType:
      CSharp: JobObject
      VB: JobObject
    qualifiedName:
      CSharp: Microsoft.Services.Core.Process.JobObject
      VB: Microsoft.Services.Core.Process.JobObject
    type: Class
    assemblies:
    - Microsoft.Services.Core
    namespace: Microsoft.Services.Core.Process
    source:
      remote:
        path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
        branch: master
        repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
      id: JobObject
      path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
      startLine: 35
    summary: "\nA class to manage windows job objects in C#. This can be used to sandbox processes or a group of processes.\n"
    example:
    - "\nHere is an example that adds the current process to a job object.\nWhen the using block ends the current process will die.\n<pre><code>using (JobObject mgr = new JobObject(\"Foo\"))\n{\n    mgr.SetJobLimits(new JobObjectLimit()\n        .KillAllProcessOnJobObjectClose(true);\n    mgr.AddProcess(Process.GetCurrentProcess());\n}</code></pre>\n"
    - "\nAn example to limit the memory usage to 40 MB.\n<pre><code>JobObject mgr = new JobObject();\nmgr.SetJobLimits(new JobObjectLimit()\n    .SetProcessCommitMemory(40*1024*1024));\nmgr.AddProcess(Process.GetCurrentProcess());\n\nwhile(true){\n//This infinite loop will not peg the CPU\n}</code></pre>\n"
    syntax:
      content:
        CSharp: 'public sealed class JobObject : IDisposable'
        VB: >-
          Public NotInheritable Class JobObject

              Implements IDisposable
    inheritance:
    - System.Object
    implements:
    - System.IDisposable
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Microsoft.Services.Core.Process.JobObject.#ctor(System.String)
      commentId: M:Microsoft.Services.Core.Process.JobObject.#ctor(System.String)
      language: CSharp
      name:
        CSharp: JobObject(String)
        VB: JobObject(String)
      nameWithType:
        CSharp: JobObject.JobObject(String)
        VB: JobObject.JobObject(String)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObject.JobObject(System.String)
        VB: Microsoft.Services.Core.Process.JobObject.JobObject(System.String)
      type: Constructor
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: .ctor
        path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
        startLine: 44
      summary: "\nCreates a new windows job object. Named job objects can be operated cross process.\n"
      example: []
      syntax:
        content:
          CSharp: public JobObject(string jobObjectName = null)
          VB: Public Sub New(jobObjectName As String = Nothing)
        parameters:
        - id: jobObjectName
          type: System.String
          description: ''
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Process.JobObject.JobObjectName
      commentId: P:Microsoft.Services.Core.Process.JobObject.JobObjectName
      language: CSharp
      name:
        CSharp: JobObjectName
        VB: JobObjectName
      nameWithType:
        CSharp: JobObject.JobObjectName
        VB: JobObject.JobObjectName
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObject.JobObjectName
        VB: Microsoft.Services.Core.Process.JobObject.JobObjectName
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: JobObjectName
        path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
        startLine: 53
      summary: "\nName of the job object. Null if it doesn't have a name\n"
      example: []
      syntax:
        content:
          CSharp: public string JobObjectName { get; }
          VB: Public ReadOnly Property JobObjectName As String
        parameters: []
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Microsoft.Services.Core.Process.JobObject.SetJobLimits(Microsoft.Services.Core.Process.JobObjectLimit)
      commentId: M:Microsoft.Services.Core.Process.JobObject.SetJobLimits(Microsoft.Services.Core.Process.JobObjectLimit)
      language: CSharp
      name:
        CSharp: SetJobLimits(JobObjectLimit)
        VB: SetJobLimits(JobObjectLimit)
      nameWithType:
        CSharp: JobObject.SetJobLimits(JobObjectLimit)
        VB: JobObject.SetJobLimits(JobObjectLimit)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObject.SetJobLimits(Microsoft.Services.Core.Process.JobObjectLimit)
        VB: Microsoft.Services.Core.Process.JobObject.SetJobLimits(Microsoft.Services.Core.Process.JobObjectLimit)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: SetJobLimits
        path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
        startLine: 59
      summary: "\nSets the limit prescribed by <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public void SetJobLimits(JobObjectLimit limit)
          VB: Public Sub SetJobLimits(limit As JobObjectLimit)
        parameters:
        - id: limit
          type: Microsoft.Services.Core.Process.JobObjectLimit
          description: limit
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Microsoft.Services.Core.Process.JobObjectLimit: 
    - id: Microsoft.Services.Core.Process.JobObject.TerminateAllProcessesInJob(System.Int32)
      commentId: M:Microsoft.Services.Core.Process.JobObject.TerminateAllProcessesInJob(System.Int32)
      language: CSharp
      name:
        CSharp: TerminateAllProcessesInJob(Int32)
        VB: TerminateAllProcessesInJob(Int32)
      nameWithType:
        CSharp: JobObject.TerminateAllProcessesInJob(Int32)
        VB: JobObject.TerminateAllProcessesInJob(Int32)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObject.TerminateAllProcessesInJob(System.Int32)
        VB: Microsoft.Services.Core.Process.JobObject.TerminateAllProcessesInJob(System.Int32)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: TerminateAllProcessesInJob
        path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
        startLine: 76
      summary: "\nTerminates all processes in the job object with the specified exit code\n"
      example: []
      syntax:
        content:
          CSharp: public void TerminateAllProcessesInJob(int exitCode)
          VB: Public Sub TerminateAllProcessesInJob(exitCode As Integer)
        parameters:
        - id: exitCode
          type: System.Int32
          description: exit code to terminate the processes with
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Process.JobObject.AddProcess(Microsoft.Win32.SafeHandles.SafeProcessHandle)
      commentId: M:Microsoft.Services.Core.Process.JobObject.AddProcess(Microsoft.Win32.SafeHandles.SafeProcessHandle)
      language: CSharp
      name:
        CSharp: AddProcess(SafeProcessHandle)
        VB: AddProcess(SafeProcessHandle)
      nameWithType:
        CSharp: JobObject.AddProcess(SafeProcessHandle)
        VB: JobObject.AddProcess(SafeProcessHandle)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObject.AddProcess(Microsoft.Win32.SafeHandles.SafeProcessHandle)
        VB: Microsoft.Services.Core.Process.JobObject.AddProcess(Microsoft.Win32.SafeHandles.SafeProcessHandle)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: AddProcess
        path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
        startLine: 86
      summary: "\nAdds the process specified by the process handle to the job object\n"
      example: []
      syntax:
        content:
          CSharp: public void AddProcess(SafeProcessHandle processHandle)
          VB: Public Sub AddProcess(processHandle As SafeProcessHandle)
        parameters:
        - id: processHandle
          type: Microsoft.Win32.SafeHandles.SafeProcessHandle
          description: ''
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Process.JobObject.AddProcess(System.Diagnostics.Process)
      commentId: M:Microsoft.Services.Core.Process.JobObject.AddProcess(System.Diagnostics.Process)
      language: CSharp
      name:
        CSharp: AddProcess(Process)
        VB: AddProcess(Process)
      nameWithType:
        CSharp: JobObject.AddProcess(Process)
        VB: JobObject.AddProcess(Process)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObject.AddProcess(System.Diagnostics.Process)
        VB: Microsoft.Services.Core.Process.JobObject.AddProcess(System.Diagnostics.Process)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: AddProcess
        path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
        startLine: 99
      summary: "\nAdds the process to the job object\n"
      example: []
      syntax:
        content:
          CSharp: public void AddProcess(Process process)
          VB: Public Sub AddProcess(process As Process)
        parameters:
        - id: process
          type: System.Diagnostics.Process
          description: ''
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Process.JobObject.AddProcess(System.Int32)
      commentId: M:Microsoft.Services.Core.Process.JobObject.AddProcess(System.Int32)
      language: CSharp
      name:
        CSharp: AddProcess(Int32)
        VB: AddProcess(Int32)
      nameWithType:
        CSharp: JobObject.AddProcess(Int32)
        VB: JobObject.AddProcess(Int32)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObject.AddProcess(System.Int32)
        VB: Microsoft.Services.Core.Process.JobObject.AddProcess(System.Int32)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: AddProcess
        path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
        startLine: 108
      summary: "\nAdds the process specified by the processId to the job object\n"
      example: []
      syntax:
        content:
          CSharp: public void AddProcess(int processId)
          VB: Public Sub AddProcess(processId As Integer)
        parameters:
        - id: processId
          type: System.Int32
          description: Process id
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Process.JobObject.GetCurrentLimit
      commentId: M:Microsoft.Services.Core.Process.JobObject.GetCurrentLimit
      language: CSharp
      name:
        CSharp: GetCurrentLimit()
        VB: GetCurrentLimit()
      nameWithType:
        CSharp: JobObject.GetCurrentLimit()
        VB: JobObject.GetCurrentLimit()
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObject.GetCurrentLimit()
        VB: Microsoft.Services.Core.Process.JobObject.GetCurrentLimit()
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: GetCurrentLimit
        path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
        startLine: 120
      summary: "\nGets the limits associated with current job object. This queries the current state of the job object.\n"
      example: []
      syntax:
        content:
          CSharp: public JobObjectLimit GetCurrentLimit()
          VB: Public Function GetCurrentLimit As JobObjectLimit
        return:
          type: Microsoft.Services.Core.Process.JobObjectLimit
          description: ''
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Process.JobObject.Dispose
      commentId: M:Microsoft.Services.Core.Process.JobObject.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: JobObject.Dispose()
        VB: JobObject.Dispose()
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObject.Dispose()
        VB: Microsoft.Services.Core.Process.JobObject.Dispose()
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: Dispose
        path: Product/source/Microsoft.Services.Core/Process/JobObject.cs
        startLine: 194
      summary: "\nDisposes the job object\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      implements:
      - System.IDisposable.Dispose
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Microsoft.Services.Core.Process.JobObjectLimit
    commentId: T:Microsoft.Services.Core.Process.JobObjectLimit
    language: CSharp
    name:
      CSharp: JobObjectLimit
      VB: JobObjectLimit
    nameWithType:
      CSharp: JobObjectLimit
      VB: JobObjectLimit
    qualifiedName:
      CSharp: Microsoft.Services.Core.Process.JobObjectLimit
      VB: Microsoft.Services.Core.Process.JobObjectLimit
    type: Class
    assemblies:
    - Microsoft.Services.Core
    namespace: Microsoft.Services.Core.Process
    source:
      remote:
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        branch: master
        repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
      id: JobObjectLimit
      path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
      startLine: 7
    summary: "\nUse this class to describe the limits to set for a given object.\n"
    example: []
    syntax:
      content:
        CSharp: public sealed class JobObjectLimit
        VB: Public NotInheritable Class JobObjectLimit
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Microsoft.Services.Core.Process.JobObjectLimit.KillAllProcessOnJobClose
      commentId: P:Microsoft.Services.Core.Process.JobObjectLimit.KillAllProcessOnJobClose
      language: CSharp
      name:
        CSharp: KillAllProcessOnJobClose
        VB: KillAllProcessOnJobClose
      nameWithType:
        CSharp: JobObjectLimit.KillAllProcessOnJobClose
        VB: JobObjectLimit.KillAllProcessOnJobClose
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObjectLimit.KillAllProcessOnJobClose
        VB: Microsoft.Services.Core.Process.JobObjectLimit.KillAllProcessOnJobClose
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: KillAllProcessOnJobClose
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        startLine: 15
      summary: "\nKills all processes in the job object and their descendent processes.\n"
      example: []
      syntax:
        content:
          CSharp: public bool KillAllProcessOnJobClose { get; }
          VB: Public ReadOnly Property KillAllProcessOnJobClose As Boolean
        parameters: []
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Microsoft.Services.Core.Process.JobObjectLimit.MinWorkingset
      commentId: P:Microsoft.Services.Core.Process.JobObjectLimit.MinWorkingset
      language: CSharp
      name:
        CSharp: MinWorkingset
        VB: MinWorkingset
      nameWithType:
        CSharp: JobObjectLimit.MinWorkingset
        VB: JobObjectLimit.MinWorkingset
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObjectLimit.MinWorkingset
        VB: Microsoft.Services.Core.Process.JobObjectLimit.MinWorkingset
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: MinWorkingset
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        startLine: 22
      summary: "\nThe minimum workset memory available to a single process in the job in bytes\nSet with <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetProcessworkingSetMemory(System.UInt64%2cSystem.UInt64)\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public ulong MinWorkingset { get; }
          VB: Public ReadOnly Property MinWorkingset As ULong
        parameters: []
        return:
          type: System.UInt64
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Microsoft.Services.Core.Process.JobObjectLimit.SetProcessworkingSetMemory(System.UInt64,System.UInt64): 
    - id: Microsoft.Services.Core.Process.JobObjectLimit.MaxWorkingSet
      commentId: P:Microsoft.Services.Core.Process.JobObjectLimit.MaxWorkingSet
      language: CSharp
      name:
        CSharp: MaxWorkingSet
        VB: MaxWorkingSet
      nameWithType:
        CSharp: JobObjectLimit.MaxWorkingSet
        VB: JobObjectLimit.MaxWorkingSet
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObjectLimit.MaxWorkingSet
        VB: Microsoft.Services.Core.Process.JobObjectLimit.MaxWorkingSet
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: MaxWorkingSet
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        startLine: 28
      summary: "\nThe maximum workset memory available to a single process in the job in bytes\nSet with <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetProcessworkingSetMemory(System.UInt64%2cSystem.UInt64)\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public ulong MaxWorkingSet { get; }
          VB: Public ReadOnly Property MaxWorkingSet As ULong
        parameters: []
        return:
          type: System.UInt64
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Microsoft.Services.Core.Process.JobObjectLimit.SetProcessworkingSetMemory(System.UInt64,System.UInt64): 
    - id: Microsoft.Services.Core.Process.JobObjectLimit.MaxProcessCommitSize
      commentId: P:Microsoft.Services.Core.Process.JobObjectLimit.MaxProcessCommitSize
      language: CSharp
      name:
        CSharp: MaxProcessCommitSize
        VB: MaxProcessCommitSize
      nameWithType:
        CSharp: JobObjectLimit.MaxProcessCommitSize
        VB: JobObjectLimit.MaxProcessCommitSize
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObjectLimit.MaxProcessCommitSize
        VB: Microsoft.Services.Core.Process.JobObjectLimit.MaxProcessCommitSize
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: MaxProcessCommitSize
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        startLine: 34
      summary: "\nThe maximum virtual memory available to a process in bytes\n<xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetProcessCommitMemory(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public ulong MaxProcessCommitSize { get; }
          VB: Public ReadOnly Property MaxProcessCommitSize As ULong
        parameters: []
        return:
          type: System.UInt64
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Microsoft.Services.Core.Process.JobObjectLimit.SetProcessCommitMemory(System.UInt64): 
    - id: Microsoft.Services.Core.Process.JobObjectLimit.MaxActiveProcesses
      commentId: P:Microsoft.Services.Core.Process.JobObjectLimit.MaxActiveProcesses
      language: CSharp
      name:
        CSharp: MaxActiveProcesses
        VB: MaxActiveProcesses
      nameWithType:
        CSharp: JobObjectLimit.MaxActiveProcesses
        VB: JobObjectLimit.MaxActiveProcesses
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObjectLimit.MaxActiveProcesses
        VB: Microsoft.Services.Core.Process.JobObjectLimit.MaxActiveProcesses
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: MaxActiveProcesses
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        startLine: 40
      summary: "\nThe maximum number of active processes in the jobobject. Beyond that process creation will fail.\n<xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetMaxActiveProcesses(System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public uint MaxActiveProcesses { get; }
          VB: Public ReadOnly Property MaxActiveProcesses As UInteger
        parameters: []
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Microsoft.Services.Core.Process.JobObjectLimit.SetMaxActiveProcesses(System.UInt32): 
    - id: Microsoft.Services.Core.Process.JobObjectLimit.MaxCpuPercentageLimit
      commentId: P:Microsoft.Services.Core.Process.JobObjectLimit.MaxCpuPercentageLimit
      language: CSharp
      name:
        CSharp: MaxCpuPercentageLimit
        VB: MaxCpuPercentageLimit
      nameWithType:
        CSharp: JobObjectLimit.MaxCpuPercentageLimit
        VB: JobObjectLimit.MaxCpuPercentageLimit
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObjectLimit.MaxCpuPercentageLimit
        VB: Microsoft.Services.Core.Process.JobObjectLimit.MaxCpuPercentageLimit
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: MaxCpuPercentageLimit
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        startLine: 50
      summary: "\nThe percentage of CPU allowed to be consumed by all processes in the job.\nThe number is percentage * 100. So 10% is 1000 \nSet with <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref>\n"
      remarks: "\nYou can use only One of the overloads <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32%2cSystem.UInt32)\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public uint MaxCpuPercentageLimit { get; }
          VB: Public ReadOnly Property MaxCpuPercentageLimit As UInteger
        parameters: []
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32): 
        Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32,System.UInt32): 
    - id: Microsoft.Services.Core.Process.JobObjectLimit.MaxCpuRangePercentage
      commentId: P:Microsoft.Services.Core.Process.JobObjectLimit.MaxCpuRangePercentage
      language: CSharp
      name:
        CSharp: MaxCpuRangePercentage
        VB: MaxCpuRangePercentage
      nameWithType:
        CSharp: JobObjectLimit.MaxCpuRangePercentage
        VB: JobObjectLimit.MaxCpuRangePercentage
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObjectLimit.MaxCpuRangePercentage
        VB: Microsoft.Services.Core.Process.JobObjectLimit.MaxCpuRangePercentage
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: MaxCpuRangePercentage
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        startLine: 60
      summary: "\nThe max percentage of CPU allowed to be consumed by all pricesses in the job.\nThe number is percentage * 100. So 10% is 1000 \nSet with <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32%2cSystem.UInt32)\" data-throw-if-not-resolved=\"false\"></xref>. \n"
      remarks: "\nYou can use only One of the overloads <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32%2cSystem.UInt32)\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public uint MaxCpuRangePercentage { get; }
          VB: Public ReadOnly Property MaxCpuRangePercentage As UInteger
        parameters: []
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32,System.UInt32): 
        Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32): 
    - id: Microsoft.Services.Core.Process.JobObjectLimit.MinCpuRangePercentage
      commentId: P:Microsoft.Services.Core.Process.JobObjectLimit.MinCpuRangePercentage
      language: CSharp
      name:
        CSharp: MinCpuRangePercentage
        VB: MinCpuRangePercentage
      nameWithType:
        CSharp: JobObjectLimit.MinCpuRangePercentage
        VB: JobObjectLimit.MinCpuRangePercentage
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObjectLimit.MinCpuRangePercentage
        VB: Microsoft.Services.Core.Process.JobObjectLimit.MinCpuRangePercentage
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: MinCpuRangePercentage
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        startLine: 70
      summary: "\nThe min percentage of CPU reserved for all process in the job in each scheduling cycle.\nThe number is percentage * 100. So 10% is 1000 \nSet with <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32%2cSystem.UInt32)\" data-throw-if-not-resolved=\"false\"></xref>\n"
      remarks: "\nYou can use only One of the overloads <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32%2cSystem.UInt32)\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public uint MinCpuRangePercentage { get; }
          VB: Public ReadOnly Property MinCpuRangePercentage As UInteger
        parameters: []
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32,System.UInt32): 
        Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32): 
    - id: Microsoft.Services.Core.Process.JobObjectLimit.KillAllProcessOnJobObjectClose(System.Boolean)
      commentId: M:Microsoft.Services.Core.Process.JobObjectLimit.KillAllProcessOnJobObjectClose(System.Boolean)
      language: CSharp
      name:
        CSharp: KillAllProcessOnJobObjectClose(Boolean)
        VB: KillAllProcessOnJobObjectClose(Boolean)
      nameWithType:
        CSharp: JobObjectLimit.KillAllProcessOnJobObjectClose(Boolean)
        VB: JobObjectLimit.KillAllProcessOnJobObjectClose(Boolean)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObjectLimit.KillAllProcessOnJobObjectClose(System.Boolean)
        VB: Microsoft.Services.Core.Process.JobObjectLimit.KillAllProcessOnJobObjectClose(System.Boolean)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: KillAllProcessOnJobObjectClose
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        startLine: 73
      syntax:
        content:
          CSharp: public JobObjectLimit KillAllProcessOnJobObjectClose(bool killAll)
          VB: Public Function KillAllProcessOnJobObjectClose(killAll As Boolean) As JobObjectLimit
        parameters:
        - id: killAll
          type: System.Boolean
        return:
          type: Microsoft.Services.Core.Process.JobObjectLimit
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32)
      commentId: M:Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32)
      language: CSharp
      name:
        CSharp: SetCpuLimit(UInt32)
        VB: SetCpuLimit(UInt32)
      nameWithType:
        CSharp: JobObjectLimit.SetCpuLimit(UInt32)
        VB: JobObjectLimit.SetCpuLimit(UInt32)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32)
        VB: Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: SetCpuLimit
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        startLine: 97
      summary: "\nSets the max CPU allowed to be used in percentage * 100 by all processes in job object combined.\nSo for 10% you would pass in 1000.\nPass 0 to unset the value\n"
      remarks: "\nOnly one of the two overloads can be used <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref>\nor <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32%2cSystem.UInt32)\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public JobObjectLimit SetCpuLimit(uint maxPercentage)
          VB: Public Function SetCpuLimit(maxPercentage As UInteger) As JobObjectLimit
        parameters:
        - id: maxPercentage
          type: System.UInt32
          description: max percentage * 100, so for 10%, it is 1000
        return:
          type: Microsoft.Services.Core.Process.JobObjectLimit
          description: ''
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32): 
        Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32,System.UInt32): 
    - id: Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32,System.UInt32)
      commentId: M:Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32,System.UInt32)
      language: CSharp
      name:
        CSharp: SetCpuLimit(UInt32, UInt32)
        VB: SetCpuLimit(UInt32, UInt32)
      nameWithType:
        CSharp: JobObjectLimit.SetCpuLimit(UInt32, UInt32)
        VB: JobObjectLimit.SetCpuLimit(UInt32, UInt32)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32, System.UInt32)
        VB: Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32, System.UInt32)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: SetCpuLimit
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        startLine: 125
      summary: "\nSets the min reserved and max CPU allowed to be used in percentage * 100 by all processes in job object combined.\nSo for 10% you would pass in 1000.\nPass 0,0 to unset the value.\n"
      remarks: "\nOnly one of the two overloads can be used <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref>\nor <xref href=\"Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32%2cSystem.UInt32)\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public JobObjectLimit SetCpuLimit(uint minPercentage, uint maxPercentage)
          VB: Public Function SetCpuLimit(minPercentage As UInteger, maxPercentage As UInteger) As JobObjectLimit
        parameters:
        - id: minPercentage
          type: System.UInt32
          description: min percentage * 100
        - id: maxPercentage
          type: System.UInt32
          description: max percentage * 100
        return:
          type: Microsoft.Services.Core.Process.JobObjectLimit
          description: ''
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32): 
        Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32,System.UInt32): 
    - id: Microsoft.Services.Core.Process.JobObjectLimit.SetProcessCommitMemory(System.UInt64)
      commentId: M:Microsoft.Services.Core.Process.JobObjectLimit.SetProcessCommitMemory(System.UInt64)
      language: CSharp
      name:
        CSharp: SetProcessCommitMemory(UInt64)
        VB: SetProcessCommitMemory(UInt64)
      nameWithType:
        CSharp: JobObjectLimit.SetProcessCommitMemory(UInt64)
        VB: JobObjectLimit.SetProcessCommitMemory(UInt64)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObjectLimit.SetProcessCommitMemory(System.UInt64)
        VB: Microsoft.Services.Core.Process.JobObjectLimit.SetProcessCommitMemory(System.UInt64)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: SetProcessCommitMemory
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        startLine: 149
      summary: "\nSet the maximum virtual memory in bytes allowed to be used per process in the job object\n"
      example: []
      syntax:
        content:
          CSharp: public JobObjectLimit SetProcessCommitMemory(ulong maxCommitSize)
          VB: Public Function SetProcessCommitMemory(maxCommitSize As ULong) As JobObjectLimit
        parameters:
        - id: maxCommitSize
          type: System.UInt64
          description: ''
        return:
          type: Microsoft.Services.Core.Process.JobObjectLimit
          description: ''
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Process.JobObjectLimit.SetMaxActiveProcesses(System.UInt32)
      commentId: M:Microsoft.Services.Core.Process.JobObjectLimit.SetMaxActiveProcesses(System.UInt32)
      language: CSharp
      name:
        CSharp: SetMaxActiveProcesses(UInt32)
        VB: SetMaxActiveProcesses(UInt32)
      nameWithType:
        CSharp: JobObjectLimit.SetMaxActiveProcesses(UInt32)
        VB: JobObjectLimit.SetMaxActiveProcesses(UInt32)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObjectLimit.SetMaxActiveProcesses(System.UInt32)
        VB: Microsoft.Services.Core.Process.JobObjectLimit.SetMaxActiveProcesses(System.UInt32)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: SetMaxActiveProcesses
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        startLine: 168
      summary: "\nSets the maximum number of processes allowed in a job object. Process creation will fail after.\nSet 0 to unset the value.\n"
      example: []
      syntax:
        content:
          CSharp: public JobObjectLimit SetMaxActiveProcesses(uint maxProcesses)
          VB: Public Function SetMaxActiveProcesses(maxProcesses As UInteger) As JobObjectLimit
        parameters:
        - id: maxProcesses
          type: System.UInt32
          description: ''
        return:
          type: Microsoft.Services.Core.Process.JobObjectLimit
          description: ''
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Process.JobObjectLimit.SetProcessworkingSetMemory(System.UInt64,System.UInt64)
      commentId: M:Microsoft.Services.Core.Process.JobObjectLimit.SetProcessworkingSetMemory(System.UInt64,System.UInt64)
      language: CSharp
      name:
        CSharp: SetProcessworkingSetMemory(UInt64, UInt64)
        VB: SetProcessworkingSetMemory(UInt64, UInt64)
      nameWithType:
        CSharp: JobObjectLimit.SetProcessworkingSetMemory(UInt64, UInt64)
        VB: JobObjectLimit.SetProcessworkingSetMemory(UInt64, UInt64)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Process.JobObjectLimit.SetProcessworkingSetMemory(System.UInt64, System.UInt64)
        VB: Microsoft.Services.Core.Process.JobObjectLimit.SetProcessworkingSetMemory(System.UInt64, System.UInt64)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Process
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: SetProcessworkingSetMemory
        path: Product/source/Microsoft.Services.Core/Process/JobObjectLimit.cs
        startLine: 187
      summary: "\nSets the working set memory range allowed per process.\n"
      example: []
      syntax:
        content:
          CSharp: public JobObjectLimit SetProcessworkingSetMemory(ulong minProcessWorkingSet, ulong maxProcessWorkingSet)
          VB: Public Function SetProcessworkingSetMemory(minProcessWorkingSet As ULong, maxProcessWorkingSet As ULong) As JobObjectLimit
        parameters:
        - id: minProcessWorkingSet
          type: System.UInt64
          description: min working set in bytes
        - id: maxProcessWorkingSet
          type: System.UInt64
          description: max working set in bytes
        return:
          type: Microsoft.Services.Core.Process.JobObjectLimit
          description: ''
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: Microsoft.Services.Core.Collections
  commentId: N:Microsoft.Services.Core.Collections
  language: CSharp
  name:
    CSharp: Microsoft.Services.Core.Collections
    VB: Microsoft.Services.Core.Collections
  nameWithType:
    CSharp: Microsoft.Services.Core.Collections
    VB: Microsoft.Services.Core.Collections
  qualifiedName:
    CSharp: Microsoft.Services.Core.Collections
    VB: Microsoft.Services.Core.Collections
  type: Namespace
  assemblies:
  - Microsoft.Services.Core
  modifiers: {}
  items:
  - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1
    commentId: T:Microsoft.Services.Core.Collections.ConcurrentHashSet`1
    language: CSharp
    name:
      CSharp: ConcurrentHashSet<T>
      VB: ConcurrentHashSet(Of T)
    nameWithType:
      CSharp: ConcurrentHashSet<T>
      VB: ConcurrentHashSet(Of T)
    qualifiedName:
      CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>
      VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T)
    type: Class
    assemblies:
    - Microsoft.Services.Core
    namespace: Microsoft.Services.Core.Collections
    source:
      remote:
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        branch: master
        repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
      id: ConcurrentHashSet
      path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
      startLine: 12
    summary: "\nAn implementation of a ConcurrentHashset\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ConcurrentHashSet<T> : ISet<T>, ICollection<T>, IEnumerable<T>, IEnumerable'
        VB: >-
          Public Class ConcurrentHashSet(Of T)

              Implements ISet(Of T), ICollection(Of T), IEnumerable(Of T), IEnumerable
      typeParameters:
      - id: T
        description: ''
    inheritance:
    - System.Object
    implements:
    - System.Collections.Generic.ISet{{T}}
    - System.Collections.Generic.ICollection{{T}}
    - System.Collections.Generic.IEnumerable{{T}}
    - System.Collections.IEnumerable
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.Comparer
      commentId: P:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.Comparer
      language: CSharp
      name:
        CSharp: Comparer
        VB: Comparer
      nameWithType:
        CSharp: ConcurrentHashSet<T>.Comparer
        VB: ConcurrentHashSet(Of T).Comparer
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.Comparer
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).Comparer
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: Comparer
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 16
      syntax:
        content:
          CSharp: public IEqualityComparer<T> Comparer { get; }
          VB: Public ReadOnly Property Comparer As IEqualityComparer(Of T)
        parameters: []
        return:
          type: System.Collections.Generic.IEqualityComparer{{T}}
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.#ctor
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.#ctor
      language: CSharp
      name:
        CSharp: ConcurrentHashSet()
        VB: ConcurrentHashSet()
      nameWithType:
        CSharp: ConcurrentHashSet<T>.ConcurrentHashSet()
        VB: ConcurrentHashSet(Of T).ConcurrentHashSet()
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.ConcurrentHashSet()
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).ConcurrentHashSet()
      type: Constructor
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: .ctor
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 18
      syntax:
        content:
          CSharp: public ConcurrentHashSet()
          VB: Public Sub New
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
      language: CSharp
      name:
        CSharp: ConcurrentHashSet(IEqualityComparer<T>)
        VB: ConcurrentHashSet(IEqualityComparer(Of T))
      nameWithType:
        CSharp: ConcurrentHashSet<T>.ConcurrentHashSet(IEqualityComparer<T>)
        VB: ConcurrentHashSet(Of T).ConcurrentHashSet(IEqualityComparer(Of T))
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.ConcurrentHashSet(System.Collections.Generic.IEqualityComparer<T>)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).ConcurrentHashSet(System.Collections.Generic.IEqualityComparer(Of T))
      type: Constructor
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: .ctor
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 27
      summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Services.Core.Collections.ConcurrentHashSet%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public ConcurrentHashSet(IEqualityComparer<T> equalityComparer)
          VB: Public Sub New(equalityComparer As IEqualityComparer(Of T))
        parameters:
        - id: equalityComparer
          type: System.Collections.Generic.IEqualityComparer{{T}}
          description: The equality comparer.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Microsoft.Services.Core.Collections.ConcurrentHashSet`1: 
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: ConcurrentHashSet(IEnumerable<T>)
        VB: ConcurrentHashSet(IEnumerable(Of T))
      nameWithType:
        CSharp: ConcurrentHashSet<T>.ConcurrentHashSet(IEnumerable<T>)
        VB: ConcurrentHashSet(Of T).ConcurrentHashSet(IEnumerable(Of T))
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.ConcurrentHashSet(System.Collections.Generic.IEnumerable<T>)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).ConcurrentHashSet(System.Collections.Generic.IEnumerable(Of T))
      type: Constructor
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: .ctor
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 34
      syntax:
        content:
          CSharp: public ConcurrentHashSet(IEnumerable<T> elements)
          VB: Public Sub New(elements As IEnumerable(Of T))
        parameters:
        - id: elements
          type: System.Collections.Generic.IEnumerable{{T}}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.GetEnumerator
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: ConcurrentHashSet<T>.GetEnumerator()
        VB: ConcurrentHashSet(Of T).GetEnumerator()
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.GetEnumerator()
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).GetEnumerator()
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: GetEnumerator
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 44
      syntax:
        content:
          CSharp: public IEnumerator<T> GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator(Of T)
        return:
          type: System.Collections.Generic.IEnumerator{{T}}
      implements:
      - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - isEii: true
      id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.System#Collections#IEnumerable#GetEnumerator
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.System#Collections#IEnumerable#GetEnumerator
      language: CSharp
      name:
        CSharp: IEnumerable.GetEnumerator()
        VB: System.Collections.IEnumerable.GetEnumerator()
      nameWithType:
        CSharp: ConcurrentHashSet<T>.IEnumerable.GetEnumerator()
        VB: ConcurrentHashSet(Of T).System.Collections.IEnumerable.GetEnumerator()
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.System.Collections.IEnumerable.GetEnumerator()
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).System.Collections.IEnumerable.GetEnumerator()
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: System.Collections.IEnumerable.GetEnumerator
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 49
      syntax:
        content:
          CSharp: IEnumerator IEnumerable.GetEnumerator()
          VB: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
        return:
          type: System.Collections.IEnumerator
      implements:
      - System.Collections.IEnumerable.GetEnumerator
      modifiers:
        CSharp: []
        VB: []
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: UnionWith(IEnumerable<T>)
        VB: UnionWith(IEnumerable(Of T))
      nameWithType:
        CSharp: ConcurrentHashSet<T>.UnionWith(IEnumerable<T>)
        VB: ConcurrentHashSet(Of T).UnionWith(IEnumerable(Of T))
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: UnionWith
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 54
      syntax:
        content:
          CSharp: public void UnionWith(IEnumerable<T> other)
          VB: Public Sub UnionWith(other As IEnumerable(Of T))
        parameters:
        - id: other
          type: System.Collections.Generic.IEnumerable{{T}}
      implements:
      - System.Collections.Generic.ISet{{T}}.UnionWith(System.Collections.Generic.IEnumerable{{T}})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: IntersectWith(IEnumerable<T>)
        VB: IntersectWith(IEnumerable(Of T))
      nameWithType:
        CSharp: ConcurrentHashSet<T>.IntersectWith(IEnumerable<T>)
        VB: ConcurrentHashSet(Of T).IntersectWith(IEnumerable(Of T))
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: IntersectWith
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 67
      syntax:
        content:
          CSharp: public void IntersectWith(IEnumerable<T> other)
          VB: Public Sub IntersectWith(other As IEnumerable(Of T))
        parameters:
        - id: other
          type: System.Collections.Generic.IEnumerable{{T}}
      implements:
      - System.Collections.Generic.ISet{{T}}.IntersectWith(System.Collections.Generic.IEnumerable{{T}})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: ExceptWith(IEnumerable<T>)
        VB: ExceptWith(IEnumerable(Of T))
      nameWithType:
        CSharp: ConcurrentHashSet<T>.ExceptWith(IEnumerable<T>)
        VB: ConcurrentHashSet(Of T).ExceptWith(IEnumerable(Of T))
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: ExceptWith
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 109
      syntax:
        content:
          CSharp: public void ExceptWith(IEnumerable<T> other)
          VB: Public Sub ExceptWith(other As IEnumerable(Of T))
        parameters:
        - id: other
          type: System.Collections.Generic.IEnumerable{{T}}
      implements:
      - System.Collections.Generic.ISet{{T}}.ExceptWith(System.Collections.Generic.IEnumerable{{T}})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: SymmetricExceptWith(IEnumerable<T>)
        VB: SymmetricExceptWith(IEnumerable(Of T))
      nameWithType:
        CSharp: ConcurrentHashSet<T>.SymmetricExceptWith(IEnumerable<T>)
        VB: ConcurrentHashSet(Of T).SymmetricExceptWith(IEnumerable(Of T))
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: SymmetricExceptWith
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 128
      syntax:
        content:
          CSharp: public void SymmetricExceptWith(IEnumerable<T> other)
          VB: Public Sub SymmetricExceptWith(other As IEnumerable(Of T))
        parameters:
        - id: other
          type: System.Collections.Generic.IEnumerable{{T}}
      implements:
      - System.Collections.Generic.ISet{{T}}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{{T}})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: IsSubsetOf(IEnumerable<T>)
        VB: IsSubsetOf(IEnumerable(Of T))
      nameWithType:
        CSharp: ConcurrentHashSet<T>.IsSubsetOf(IEnumerable<T>)
        VB: ConcurrentHashSet(Of T).IsSubsetOf(IEnumerable(Of T))
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: IsSubsetOf
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 169
      syntax:
        content:
          CSharp: public bool IsSubsetOf(IEnumerable<T> other)
          VB: Public Function IsSubsetOf(other As IEnumerable(Of T)) As Boolean
        parameters:
        - id: other
          type: System.Collections.Generic.IEnumerable{{T}}
        return:
          type: System.Boolean
      implements:
      - System.Collections.Generic.ISet{{T}}.IsSubsetOf(System.Collections.Generic.IEnumerable{{T}})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: IsSupersetOf(IEnumerable<T>)
        VB: IsSupersetOf(IEnumerable(Of T))
      nameWithType:
        CSharp: ConcurrentHashSet<T>.IsSupersetOf(IEnumerable<T>)
        VB: ConcurrentHashSet(Of T).IsSupersetOf(IEnumerable(Of T))
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: IsSupersetOf
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 203
      syntax:
        content:
          CSharp: public bool IsSupersetOf(IEnumerable<T> other)
          VB: Public Function IsSupersetOf(other As IEnumerable(Of T)) As Boolean
        parameters:
        - id: other
          type: System.Collections.Generic.IEnumerable{{T}}
        return:
          type: System.Boolean
      implements:
      - System.Collections.Generic.ISet{{T}}.IsSupersetOf(System.Collections.Generic.IEnumerable{{T}})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: IsProperSupersetOf(IEnumerable<T>)
        VB: IsProperSupersetOf(IEnumerable(Of T))
      nameWithType:
        CSharp: ConcurrentHashSet<T>.IsProperSupersetOf(IEnumerable<T>)
        VB: ConcurrentHashSet(Of T).IsProperSupersetOf(IEnumerable(Of T))
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: IsProperSupersetOf
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 219
      syntax:
        content:
          CSharp: public bool IsProperSupersetOf(IEnumerable<T> other)
          VB: Public Function IsProperSupersetOf(other As IEnumerable(Of T)) As Boolean
        parameters:
        - id: other
          type: System.Collections.Generic.IEnumerable{{T}}
        return:
          type: System.Boolean
      implements:
      - System.Collections.Generic.ISet{{T}}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{{T}})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: IsProperSubsetOf(IEnumerable<T>)
        VB: IsProperSubsetOf(IEnumerable(Of T))
      nameWithType:
        CSharp: ConcurrentHashSet<T>.IsProperSubsetOf(IEnumerable<T>)
        VB: ConcurrentHashSet(Of T).IsProperSubsetOf(IEnumerable(Of T))
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: IsProperSubsetOf
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 251
      syntax:
        content:
          CSharp: public bool IsProperSubsetOf(IEnumerable<T> other)
          VB: Public Function IsProperSubsetOf(other As IEnumerable(Of T)) As Boolean
        parameters:
        - id: other
          type: System.Collections.Generic.IEnumerable{{T}}
        return:
          type: System.Boolean
      implements:
      - System.Collections.Generic.ISet{{T}}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{{T}})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: Overlaps(IEnumerable<T>)
        VB: Overlaps(IEnumerable(Of T))
      nameWithType:
        CSharp: ConcurrentHashSet<T>.Overlaps(IEnumerable<T>)
        VB: ConcurrentHashSet(Of T).Overlaps(IEnumerable(Of T))
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: Overlaps
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 282
      syntax:
        content:
          CSharp: public bool Overlaps(IEnumerable<T> other)
          VB: Public Function Overlaps(other As IEnumerable(Of T)) As Boolean
        parameters:
        - id: other
          type: System.Collections.Generic.IEnumerable{{T}}
        return:
          type: System.Boolean
      implements:
      - System.Collections.Generic.ISet{{T}}.Overlaps(System.Collections.Generic.IEnumerable{{T}})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: SetEquals(IEnumerable<T>)
        VB: SetEquals(IEnumerable(Of T))
      nameWithType:
        CSharp: ConcurrentHashSet<T>.SetEquals(IEnumerable<T>)
        VB: ConcurrentHashSet(Of T).SetEquals(IEnumerable(Of T))
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: SetEquals
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 294
      syntax:
        content:
          CSharp: public bool SetEquals(IEnumerable<T> other)
          VB: Public Function SetEquals(other As IEnumerable(Of T)) As Boolean
        parameters:
        - id: other
          type: System.Collections.Generic.IEnumerable{{T}}
        return:
          type: System.Boolean
      implements:
      - System.Collections.Generic.ISet{{T}}.SetEquals(System.Collections.Generic.IEnumerable{{T}})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.Add(`0)
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.Add(`0)
      language: CSharp
      name:
        CSharp: Add(T)
        VB: Add(T)
      nameWithType:
        CSharp: ConcurrentHashSet<T>.Add(T)
        VB: ConcurrentHashSet(Of T).Add(T)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.Add(T)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).Add(T)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: Add
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 301
      syntax:
        content:
          CSharp: public bool Add(T item)
          VB: Public Function Add(item As T) As Boolean
        parameters:
        - id: item
          type: '{T}'
        return:
          type: System.Boolean
      implements:
      - System.Collections.Generic.ISet{{T}}.Add({T})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - isEii: true
      id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
      language: CSharp
      name:
        CSharp: ICollection<T>.Add(T)
        VB: System.Collections.Generic.ICollection<T>.Add(T)
      nameWithType:
        CSharp: ConcurrentHashSet<T>.ICollection<T>.Add(T)
        VB: ConcurrentHashSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: System.Collections.Generic.ICollection<T>.Add
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 306
      syntax:
        content:
          CSharp: void ICollection<T>.Add(T item)
          VB: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add
        parameters:
        - id: item
          type: '{T}'
      implements:
      - System.Collections.Generic.ICollection{{T}}.Add({T})
      modifiers:
        CSharp: []
        VB: []
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.Clear
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: ConcurrentHashSet<T>.Clear()
        VB: ConcurrentHashSet(Of T).Clear()
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.Clear()
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).Clear()
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: Clear
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 312
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear
      implements:
      - System.Collections.Generic.ICollection{{T}}.Clear
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.Contains(`0)
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.Contains(`0)
      language: CSharp
      name:
        CSharp: Contains(T)
        VB: Contains(T)
      nameWithType:
        CSharp: ConcurrentHashSet<T>.Contains(T)
        VB: ConcurrentHashSet(Of T).Contains(T)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.Contains(T)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).Contains(T)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: Contains
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 317
      syntax:
        content:
          CSharp: public bool Contains(T item)
          VB: Public Function Contains(item As T) As Boolean
        parameters:
        - id: item
          type: '{T}'
        return:
          type: System.Boolean
      implements:
      - System.Collections.Generic.ICollection{{T}}.Contains({T})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.CopyTo(`0[],System.Int32)
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.CopyTo(`0[],System.Int32)
      language: CSharp
      name:
        CSharp: CopyTo(T[], Int32)
        VB: CopyTo(T(), Int32)
      nameWithType:
        CSharp: ConcurrentHashSet<T>.CopyTo(T[], Int32)
        VB: ConcurrentHashSet(Of T).CopyTo(T(), Int32)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.CopyTo(T[], System.Int32)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).CopyTo(T(), System.Int32)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: CopyTo
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 322
      syntax:
        content:
          CSharp: public void CopyTo(T[] array, int arrayIndex)
          VB: Public Sub CopyTo(array As T(), arrayIndex As Integer)
        parameters:
        - id: array
          type: '{T}[]'
        - id: arrayIndex
          type: System.Int32
      implements:
      - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.Remove(`0)
      commentId: M:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.Remove(`0)
      language: CSharp
      name:
        CSharp: Remove(T)
        VB: Remove(T)
      nameWithType:
        CSharp: ConcurrentHashSet<T>.Remove(T)
        VB: ConcurrentHashSet(Of T).Remove(T)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.Remove(T)
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).Remove(T)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: Remove
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 328
      syntax:
        content:
          CSharp: public bool Remove(T item)
          VB: Public Function Remove(item As T) As Boolean
        parameters:
        - id: item
          type: '{T}'
        return:
          type: System.Boolean
      implements:
      - System.Collections.Generic.ICollection{{T}}.Remove({T})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.Count
      commentId: P:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: ConcurrentHashSet<T>.Count
        VB: ConcurrentHashSet(Of T).Count
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.Count
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).Count
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: Count
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 334
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      implements:
      - System.Collections.Generic.ICollection{{T}}.Count
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1.IsReadOnly
      commentId: P:Microsoft.Services.Core.Collections.ConcurrentHashSet`1.IsReadOnly
      language: CSharp
      name:
        CSharp: IsReadOnly
        VB: IsReadOnly
      nameWithType:
        CSharp: ConcurrentHashSet<T>.IsReadOnly
        VB: ConcurrentHashSet(Of T).IsReadOnly
      qualifiedName:
        CSharp: Microsoft.Services.Core.Collections.ConcurrentHashSet<T>.IsReadOnly
        VB: Microsoft.Services.Core.Collections.ConcurrentHashSet(Of T).IsReadOnly
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Collections
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: IsReadOnly
        path: Product/source/Microsoft.Services.Core/Collections/ConcurrentHashSet.cs
        startLine: 336
      syntax:
        content:
          CSharp: public bool IsReadOnly { get; }
          VB: Public ReadOnly Property IsReadOnly As Boolean
        parameters: []
        return:
          type: System.Boolean
      implements:
      - System.Collections.Generic.ICollection{{T}}.IsReadOnly
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
- id: Microsoft.Services.Core.Retries
  commentId: N:Microsoft.Services.Core.Retries
  language: CSharp
  name:
    CSharp: Microsoft.Services.Core.Retries
    VB: Microsoft.Services.Core.Retries
  nameWithType:
    CSharp: Microsoft.Services.Core.Retries
    VB: Microsoft.Services.Core.Retries
  qualifiedName:
    CSharp: Microsoft.Services.Core.Retries
    VB: Microsoft.Services.Core.Retries
  type: Namespace
  assemblies:
  - Microsoft.Services.Core
  modifiers: {}
  items:
  - id: Microsoft.Services.Core.Retries.RetryingEventArgs
    commentId: T:Microsoft.Services.Core.Retries.RetryingEventArgs
    language: CSharp
    name:
      CSharp: RetryingEventArgs
      VB: RetryingEventArgs
    nameWithType:
      CSharp: RetryingEventArgs
      VB: RetryingEventArgs
    qualifiedName:
      CSharp: Microsoft.Services.Core.Retries.RetryingEventArgs
      VB: Microsoft.Services.Core.Retries.RetryingEventArgs
    type: Class
    assemblies:
    - Microsoft.Services.Core
    namespace: Microsoft.Services.Core.Retries
    source:
      remote:
        path: Product/source/Microsoft.Services.Core/Retries/RetryingEventArgs.cs
        branch: master
        repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
      id: RetryingEventArgs
      path: Product/source/Microsoft.Services.Core/Retries/RetryingEventArgs.cs
      startLine: 7
    summary: "\nContains information that is required for the Retrying delegate.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class RetryingEventArgs : EventArgs'
        VB: >-
          Public Class RetryingEventArgs

              Inherits EventArgs
    inheritance:
    - System.Object
    - System.EventArgs
    inheritedMembers:
    - System.EventArgs.Empty
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Microsoft.Services.Core.Retries.RetryingEventArgs.CurrentRetryCount
      commentId: P:Microsoft.Services.Core.Retries.RetryingEventArgs.CurrentRetryCount
      language: CSharp
      name:
        CSharp: CurrentRetryCount
        VB: CurrentRetryCount
      nameWithType:
        CSharp: RetryingEventArgs.CurrentRetryCount
        VB: RetryingEventArgs.CurrentRetryCount
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryingEventArgs.CurrentRetryCount
        VB: Microsoft.Services.Core.Retries.RetryingEventArgs.CurrentRetryCount
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryingEventArgs.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: CurrentRetryCount
        path: Product/source/Microsoft.Services.Core/Retries/RetryingEventArgs.cs
        startLine: 12
      summary: "\nGets the current retry count.\n"
      example: []
      syntax:
        content:
          CSharp: public int CurrentRetryCount { get; }
          VB: Public ReadOnly Property CurrentRetryCount As Integer
        parameters: []
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Microsoft.Services.Core.Retries.RetryingEventArgs.Delay
      commentId: P:Microsoft.Services.Core.Retries.RetryingEventArgs.Delay
      language: CSharp
      name:
        CSharp: Delay
        VB: Delay
      nameWithType:
        CSharp: RetryingEventArgs.Delay
        VB: RetryingEventArgs.Delay
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryingEventArgs.Delay
        VB: Microsoft.Services.Core.Retries.RetryingEventArgs.Delay
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryingEventArgs.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: Delay
        path: Product/source/Microsoft.Services.Core/Retries/RetryingEventArgs.cs
        startLine: 17
      summary: "\nGets the delay that indicates how long the current thread will be suspended before the next iteration is invoked.\n"
      example: []
      syntax:
        content:
          CSharp: public TimeSpan Delay { get; }
          VB: Public ReadOnly Property Delay As TimeSpan
        parameters: []
        return:
          type: System.TimeSpan
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Microsoft.Services.Core.Retries.RetryingEventArgs.LastException
      commentId: P:Microsoft.Services.Core.Retries.RetryingEventArgs.LastException
      language: CSharp
      name:
        CSharp: LastException
        VB: LastException
      nameWithType:
        CSharp: RetryingEventArgs.LastException
        VB: RetryingEventArgs.LastException
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryingEventArgs.LastException
        VB: Microsoft.Services.Core.Retries.RetryingEventArgs.LastException
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryingEventArgs.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: LastException
        path: Product/source/Microsoft.Services.Core/Retries/RetryingEventArgs.cs
        startLine: 22
      summary: "\nGets the exception that caused the retry conditions to occur.\n"
      example: []
      syntax:
        content:
          CSharp: public Exception LastException { get; }
          VB: Public ReadOnly Property LastException As Exception
        parameters: []
        return:
          type: System.Exception
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Microsoft.Services.Core.Retries.RetryingEventArgs.CallingMethod
      commentId: P:Microsoft.Services.Core.Retries.RetryingEventArgs.CallingMethod
      language: CSharp
      name:
        CSharp: CallingMethod
        VB: CallingMethod
      nameWithType:
        CSharp: RetryingEventArgs.CallingMethod
        VB: RetryingEventArgs.CallingMethod
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryingEventArgs.CallingMethod
        VB: Microsoft.Services.Core.Retries.RetryingEventArgs.CallingMethod
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryingEventArgs.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: CallingMethod
        path: Product/source/Microsoft.Services.Core/Retries/RetryingEventArgs.cs
        startLine: 27
      summary: "\nGets the name of the function being executed.\n"
      example: []
      syntax:
        content:
          CSharp: public string CallingMethod { get; }
          VB: Public ReadOnly Property CallingMethod As String
        parameters: []
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Microsoft.Services.Core.Retries.RetryingEventArgs.#ctor(System.Int32,System.TimeSpan,System.Exception)
      commentId: M:Microsoft.Services.Core.Retries.RetryingEventArgs.#ctor(System.Int32,System.TimeSpan,System.Exception)
      language: CSharp
      name:
        CSharp: RetryingEventArgs(Int32, TimeSpan, Exception)
        VB: RetryingEventArgs(Int32, TimeSpan, Exception)
      nameWithType:
        CSharp: RetryingEventArgs.RetryingEventArgs(Int32, TimeSpan, Exception)
        VB: RetryingEventArgs.RetryingEventArgs(Int32, TimeSpan, Exception)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryingEventArgs.RetryingEventArgs(System.Int32, System.TimeSpan, System.Exception)
        VB: Microsoft.Services.Core.Retries.RetryingEventArgs.RetryingEventArgs(System.Int32, System.TimeSpan, System.Exception)
      type: Constructor
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryingEventArgs.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: .ctor
        path: Product/source/Microsoft.Services.Core/Retries/RetryingEventArgs.cs
        startLine: 35
      summary: "\nInitializes a new instance of the <xref href=\"Hyak.Common.TransientFaultHandling.RetryingEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public RetryingEventArgs(int currentRetryCount, TimeSpan delay, Exception lastException)
          VB: Public Sub New(currentRetryCount As Integer, delay As TimeSpan, lastException As Exception)
        parameters:
        - id: currentRetryCount
          type: System.Int32
          description: The current retry attempt count.
        - id: delay
          type: System.TimeSpan
          description: The delay that indicates how long the current thread will be suspended before the next iteration is invoked.
        - id: lastException
          type: System.Exception
          description: The exception that caused the retry conditions to occur.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Hyak.Common.TransientFaultHandling.RetryingEventArgs: 
  - id: Microsoft.Services.Core.Retries.RetryPolicy
    commentId: T:Microsoft.Services.Core.Retries.RetryPolicy
    language: CSharp
    name:
      CSharp: RetryPolicy
      VB: RetryPolicy
    nameWithType:
      CSharp: RetryPolicy
      VB: RetryPolicy
    qualifiedName:
      CSharp: Microsoft.Services.Core.Retries.RetryPolicy
      VB: Microsoft.Services.Core.Retries.RetryPolicy
    type: Class
    assemblies:
    - Microsoft.Services.Core
    namespace: Microsoft.Services.Core.Retries
    source:
      remote:
        path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
        branch: master
        repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
      id: RetryPolicy
      path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
      startLine: 11
    summary: "\nProvides the base implementation of the retry mechanism for unreliable actions and transient conditions.\n"
    example: []
    syntax:
      content:
        CSharp: public class RetryPolicy
        VB: Public Class RetryPolicy
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Microsoft.Services.Core.Retries.RetryPolicy.ErrorDetectionStrategy
      commentId: P:Microsoft.Services.Core.Retries.RetryPolicy.ErrorDetectionStrategy
      language: CSharp
      name:
        CSharp: ErrorDetectionStrategy
        VB: ErrorDetectionStrategy
      nameWithType:
        CSharp: RetryPolicy.ErrorDetectionStrategy
        VB: RetryPolicy.ErrorDetectionStrategy
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryPolicy.ErrorDetectionStrategy
        VB: Microsoft.Services.Core.Retries.RetryPolicy.ErrorDetectionStrategy
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: ErrorDetectionStrategy
        path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
        startLine: 16
      summary: "\nGets the instance of the error detection strategy.\n"
      example: []
      syntax:
        content:
          CSharp: public ITransientErrorDetectionStrategy ErrorDetectionStrategy { get; }
          VB: Public ReadOnly Property ErrorDetectionStrategy As ITransientErrorDetectionStrategy
        parameters: []
        return:
          type: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Microsoft.Services.Core.Retries.RetryPolicy.RetryStrategy
      commentId: P:Microsoft.Services.Core.Retries.RetryPolicy.RetryStrategy
      language: CSharp
      name:
        CSharp: RetryStrategy
        VB: RetryStrategy
      nameWithType:
        CSharp: RetryPolicy.RetryStrategy
        VB: RetryPolicy.RetryStrategy
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryPolicy.RetryStrategy
        VB: Microsoft.Services.Core.Retries.RetryPolicy.RetryStrategy
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: RetryStrategy
        path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
        startLine: 21
      summary: "\nGets the retry strategy.\n"
      example: []
      syntax:
        content:
          CSharp: public RetryStrategy RetryStrategy { get; }
          VB: Public ReadOnly Property RetryStrategy As RetryStrategy
        parameters: []
        return:
          type: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Microsoft.Services.Core.Retries.RetryPolicy.Retrying
      commentId: E:Microsoft.Services.Core.Retries.RetryPolicy.Retrying
      language: CSharp
      name:
        CSharp: Retrying
        VB: Retrying
      nameWithType:
        CSharp: RetryPolicy.Retrying
        VB: RetryPolicy.Retrying
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryPolicy.Retrying
        VB: Microsoft.Services.Core.Retries.RetryPolicy.Retrying
      type: Event
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: Retrying
        path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
        startLine: 26
      summary: "\nAn instance of a callback delegate that will be invoked whenever a retry condition is encountered.\n"
      example: []
      syntax:
        content:
          CSharp: public event EventHandler<RetryingEventArgs> Retrying
          VB: Public Event Retrying As EventHandler(Of RetryingEventArgs)
        return:
          type: System.EventHandler{Microsoft.Services.Core.Retries.RetryingEventArgs}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Retries.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)
      commentId: M:Microsoft.Services.Core.Retries.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)
      language: CSharp
      name:
        CSharp: OnRetrying(Int32, Exception, TimeSpan)
        VB: OnRetrying(Int32, Exception, TimeSpan)
      nameWithType:
        CSharp: RetryPolicy.OnRetrying(Int32, Exception, TimeSpan)
        VB: RetryPolicy.OnRetrying(Int32, Exception, TimeSpan)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryPolicy.OnRetrying(System.Int32, System.Exception, System.TimeSpan)
        VB: Microsoft.Services.Core.Retries.RetryPolicy.OnRetrying(System.Int32, System.Exception, System.TimeSpan)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: OnRetrying
        path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
        startLine: 34
      summary: "\nNotifies the subscribers whenever a retry condition is encountered.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnRetrying(int retryCount, Exception lastError, TimeSpan delay)
          VB: Protected Overridable Sub OnRetrying(retryCount As Integer, lastError As Exception, delay As TimeSpan)
        parameters:
        - id: retryCount
          type: System.Int32
          description: The current retry attempt count.
        - id: lastError
          type: System.Exception
          description: The exception that caused the retry conditions to occur.
        - id: delay
          type: System.TimeSpan
          description: The delay that indicates how long the current thread will be suspended before the next iteration is invoked.
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Microsoft.Services.Core.Retries.RetryPolicy.#ctor(Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy,Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy)
      commentId: M:Microsoft.Services.Core.Retries.RetryPolicy.#ctor(Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy,Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy)
      language: CSharp
      name:
        CSharp: RetryPolicy(ITransientErrorDetectionStrategy, RetryStrategy)
        VB: RetryPolicy(ITransientErrorDetectionStrategy, RetryStrategy)
      nameWithType:
        CSharp: RetryPolicy.RetryPolicy(ITransientErrorDetectionStrategy, RetryStrategy)
        VB: RetryPolicy.RetryPolicy(ITransientErrorDetectionStrategy, RetryStrategy)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryPolicy.RetryPolicy(Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy, Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy)
        VB: Microsoft.Services.Core.Retries.RetryPolicy.RetryPolicy(Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy, Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy)
      type: Constructor
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: .ctor
        path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
        startLine: 47
      summary: "\nInitializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters \ndefining the progressive delay between retries.\n"
      example: []
      syntax:
        content:
          CSharp: public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, RetryStrategy retryStrategy)
          VB: Public Sub New(errorDetectionStrategy As ITransientErrorDetectionStrategy, retryStrategy As RetryStrategy)
        parameters:
        - id: errorDetectionStrategy
          type: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy
          description: The ITransientErrorDetectionStrategy that is responsible for detecting transient conditions.
        - id: retryStrategy
          type: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
          description: The RetryStrategy to use for this retry policy.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Retries.RetryPolicy.ExecuteAction(System.Action,System.Threading.CancellationToken)
      commentId: M:Microsoft.Services.Core.Retries.RetryPolicy.ExecuteAction(System.Action,System.Threading.CancellationToken)
      language: CSharp
      name:
        CSharp: ExecuteAction(Action, CancellationToken)
        VB: ExecuteAction(Action, CancellationToken)
      nameWithType:
        CSharp: RetryPolicy.ExecuteAction(Action, CancellationToken)
        VB: RetryPolicy.ExecuteAction(Action, CancellationToken)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryPolicy.ExecuteAction(System.Action, System.Threading.CancellationToken)
        VB: Microsoft.Services.Core.Retries.RetryPolicy.ExecuteAction(System.Action, System.Threading.CancellationToken)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: ExecuteAction
        path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
        startLine: 63
      summary: "\nRepetitively executes the specified action while it satisfies the current retry policy.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void ExecuteAction(Action action, CancellationToken cancellationToken)
          VB: Public Overridable Sub ExecuteAction(action As Action, cancellationToken As CancellationToken)
        parameters:
        - id: action
          type: System.Action
          description: A delegate that represents the executable action that doesn't return any results.
        - id: cancellationToken
          type: System.Threading.CancellationToken
          description: The cancellation token.
      exceptions:
      - type: System.ArgumentNullException
        commentId: T:System.ArgumentNullException
        description: action - The action cannot be null.
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Microsoft.Services.Core.Retries.RetryPolicy.Execute``1(System.Func{``0},System.Threading.CancellationToken)
      commentId: M:Microsoft.Services.Core.Retries.RetryPolicy.Execute``1(System.Func{``0},System.Threading.CancellationToken)
      language: CSharp
      name:
        CSharp: Execute<TResult>(Func<TResult>, CancellationToken)
        VB: Execute(Of TResult)(Func(Of TResult), CancellationToken)
      nameWithType:
        CSharp: RetryPolicy.Execute<TResult>(Func<TResult>, CancellationToken)
        VB: RetryPolicy.Execute(Of TResult)(Func(Of TResult), CancellationToken)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryPolicy.Execute<TResult>(System.Func<TResult>, System.Threading.CancellationToken)
        VB: Microsoft.Services.Core.Retries.RetryPolicy.Execute(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: Execute
        path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
        startLine: 84
      summary: "\nRepetitively executes the specified action while it satisfies the current retry policy.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual TResult Execute<TResult>(Func<TResult> func, CancellationToken cancellationToken)
          VB: Public Overridable Function Execute(Of TResult)(func As Func(Of TResult), cancellationToken As CancellationToken) As TResult
        parameters:
        - id: func
          type: System.Func{{TResult}}
          description: A delegate that represents the executable action that returns the result of type <em>TResult</em>.
        - id: cancellationToken
          type: System.Threading.CancellationToken
          description: The cancellation token.
        typeParameters:
        - id: TResult
          description: The type of result expected from the executable action.
        return:
          type: '{TResult}'
          description: "\nThe result from the action.\n"
      exceptions:
      - type: System.ArgumentNullException
        commentId: T:System.ArgumentNullException
        description: func
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Microsoft.Services.Core.Retries.RetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
      commentId: M:Microsoft.Services.Core.Retries.RetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
      language: CSharp
      name:
        CSharp: ExecuteAsync(Func<Task>, CancellationToken)
        VB: ExecuteAsync(Func(Of Task), CancellationToken)
      nameWithType:
        CSharp: RetryPolicy.ExecuteAsync(Func<Task>, CancellationToken)
        VB: RetryPolicy.ExecuteAsync(Func(Of Task), CancellationToken)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryPolicy.ExecuteAsync(System.Func<System.Threading.Tasks.Task>, System.Threading.CancellationToken)
        VB: Microsoft.Services.Core.Retries.RetryPolicy.ExecuteAsync(System.Func(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: ExecuteAsync
        path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
        startLine: 118
      summary: "\nRepetitively executes the specified asynchronous task while it satisfies the current retry policy.\n"
      example: []
      syntax:
        content:
          CSharp: public Task ExecuteAsync(Func<Task> taskAction, CancellationToken cancellationToken)
          VB: Public Function ExecuteAsync(taskAction As Func(Of Task), cancellationToken As CancellationToken) As Task
        parameters:
        - id: taskAction
          type: System.Func{System.Threading.Tasks.Task}
          description: A function that returns a started task (also known as "hot" task).
        - id: cancellationToken
          type: System.Threading.CancellationToken
          description: The cancellation token.
        return:
          type: System.Threading.Tasks.Task
          description: "\nA task that will run to completion if the original task completes successfully (either the\nfirst time or after retrying transient failures). If the task fails with a non-transient error or\nthe retry limit is reached, the returned task will transition to a faulted state and the exception must be observed.\n"
      exceptions:
      - type: System.ArgumentNullException
        commentId: T:System.ArgumentNullException
        description: taskAction
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Retries.RetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
      commentId: M:Microsoft.Services.Core.Retries.RetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
      language: CSharp
      name:
        CSharp: ExecuteAsync<TResult>(Func<Task<TResult>>, CancellationToken)
        VB: ExecuteAsync(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)
      nameWithType:
        CSharp: RetryPolicy.ExecuteAsync<TResult>(Func<Task<TResult>>, CancellationToken)
        VB: RetryPolicy.ExecuteAsync(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryPolicy.ExecuteAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken)
        VB: Microsoft.Services.Core.Retries.RetryPolicy.ExecuteAsync(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: ExecuteAsync
        path: Product/source/Microsoft.Services.Core/Retries/RetryPolicy.cs
        startLine: 154
      summary: "\nRepeatedly executes the specified asynchronous task while it satisfies the current retry policy.\n"
      example: []
      syntax:
        content:
          CSharp: public Task<TResult> ExecuteAsync<TResult>(Func<Task<TResult>> taskFunc, CancellationToken cancellationToken)
          VB: Public Function ExecuteAsync(Of TResult)(taskFunc As Func(Of Task(Of TResult)), cancellationToken As CancellationToken) As Task(Of TResult)
        parameters:
        - id: taskFunc
          type: System.Func{System.Threading.Tasks.Task{{TResult}}}
          description: A function that returns a started task (also known as "hot" task).
        - id: cancellationToken
          type: System.Threading.CancellationToken
          description: The cancellation token.
        typeParameters:
        - id: TResult
          description: The type of the result.
        return:
          type: System.Threading.Tasks.Task{{TResult}}
          description: "\nReturns a task that will run to completion if the original task completes successfully (either the\nfirst time or after retrying transient failures). If the task fails with a non-transient error or\nthe retry limit is reached, the returned task will transition to a faulted state and the exception must be observed.\n"
      exceptions:
      - type: System.ArgumentNullException
        commentId: T:System.ArgumentNullException
        description: taskFunc
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Microsoft.Services.Core.Retries.ShouldRetry
    commentId: T:Microsoft.Services.Core.Retries.ShouldRetry
    language: CSharp
    name:
      CSharp: ShouldRetry
      VB: ShouldRetry
    nameWithType:
      CSharp: ShouldRetry
      VB: ShouldRetry
    qualifiedName:
      CSharp: Microsoft.Services.Core.Retries.ShouldRetry
      VB: Microsoft.Services.Core.Retries.ShouldRetry
    type: Delegate
    assemblies:
    - Microsoft.Services.Core
    namespace: Microsoft.Services.Core.Retries
    source:
      remote:
        path: Product/source/Microsoft.Services.Core/Retries/ShouldRetry.cs
        branch: master
        repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
      id: ShouldRetry
      path: Product/source/Microsoft.Services.Core/Retries/ShouldRetry.cs
      startLine: 13
    summary: "\nDefines a callback delegate that will be invoked whenever a retry condition is encountered.\n"
    example: []
    syntax:
      content:
        CSharp: public delegate bool ShouldRetry(int retryCount, Exception lastException, out TimeSpan delay);
        VB: Public Delegate Function ShouldRetry(retryCount As Integer, lastException As Exception, ByRef delay As TimeSpan) As Boolean
      parameters:
      - id: retryCount
        type: System.Int32
        description: The current retry attempt count.
      - id: lastException
        type: System.Exception
        description: The exception that caused the retry conditions to occur.
      - id: delay
        type: System.TimeSpan
        description: The delay that indicates how long the current thread will be suspended before the next iteration is invoked.
      return:
        type: System.Boolean
        description: "\nWhether the retry should happen.\n"
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
- id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
  commentId: N:Microsoft.Services.Core.Retries.ErrorDetectionStrategies
  language: CSharp
  name:
    CSharp: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
    VB: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
  nameWithType:
    CSharp: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
    VB: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
  qualifiedName:
    CSharp: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
    VB: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
  type: Namespace
  assemblies:
  - Microsoft.Services.Core
  modifiers: {}
  items:
  - id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy
    commentId: T:Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy
    language: CSharp
    name:
      CSharp: AllExceptionsAreTransientErrorDetectionStrategy
      VB: AllExceptionsAreTransientErrorDetectionStrategy
    nameWithType:
      CSharp: AllExceptionsAreTransientErrorDetectionStrategy
      VB: AllExceptionsAreTransientErrorDetectionStrategy
    qualifiedName:
      CSharp: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy
      VB: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy
    type: Class
    assemblies:
    - Microsoft.Services.Core
    namespace: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
    source:
      remote:
        path: Product/source/Microsoft.Services.Core/Retries/ErrorDetectionStrategies/AllExceptionsAreTransientErrorDetectionStrategy.cs
        branch: master
        repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
      id: AllExceptionsAreTransientErrorDetectionStrategy
      path: Product/source/Microsoft.Services.Core/Retries/ErrorDetectionStrategies/AllExceptionsAreTransientErrorDetectionStrategy.cs
      startLine: 7
    summary: "\nAlways returns true for every Exception.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public sealed class AllExceptionsAreTransientErrorDetectionStrategy : ITransientErrorDetectionStrategy
        VB: >-
          <Serializable>

          Public NotInheritable Class AllExceptionsAreTransientErrorDetectionStrategy

              Implements ITransientErrorDetectionStrategy
    inheritance:
    - System.Object
    implements:
    - Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy.IsTransient(System.Exception)
      commentId: M:Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy.IsTransient(System.Exception)
      language: CSharp
      name:
        CSharp: IsTransient(Exception)
        VB: IsTransient(Exception)
      nameWithType:
        CSharp: AllExceptionsAreTransientErrorDetectionStrategy.IsTransient(Exception)
        VB: AllExceptionsAreTransientErrorDetectionStrategy.IsTransient(Exception)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy.IsTransient(System.Exception)
        VB: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy.IsTransient(System.Exception)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/ErrorDetectionStrategies/AllExceptionsAreTransientErrorDetectionStrategy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: IsTransient
        path: Product/source/Microsoft.Services.Core/Retries/ErrorDetectionStrategies/AllExceptionsAreTransientErrorDetectionStrategy.cs
        startLine: 10
      syntax:
        content:
          CSharp: public bool IsTransient(Exception ex)
          VB: Public Function IsTransient(ex As Exception) As Boolean
        parameters:
        - id: ex
          type: System.Exception
        return:
          type: System.Boolean
      implements:
      - Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.IsTransient(System.Exception)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy.GetExtendedDetails(System.Exception)
      commentId: M:Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy.GetExtendedDetails(System.Exception)
      language: CSharp
      name:
        CSharp: GetExtendedDetails(Exception)
        VB: GetExtendedDetails(Exception)
      nameWithType:
        CSharp: AllExceptionsAreTransientErrorDetectionStrategy.GetExtendedDetails(Exception)
        VB: AllExceptionsAreTransientErrorDetectionStrategy.GetExtendedDetails(Exception)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy.GetExtendedDetails(System.Exception)
        VB: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy.GetExtendedDetails(System.Exception)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/ErrorDetectionStrategies/AllExceptionsAreTransientErrorDetectionStrategy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: GetExtendedDetails
        path: Product/source/Microsoft.Services.Core/Retries/ErrorDetectionStrategies/AllExceptionsAreTransientErrorDetectionStrategy.cs
        startLine: 20
      summary: "\nGets the extended details for the exception provided.\n"
      example: []
      syntax:
        content:
          CSharp: public string GetExtendedDetails(Exception ex)
          VB: Public Function GetExtendedDetails(ex As Exception) As String
        parameters:
        - id: ex
          type: System.Exception
          description: The exception.
        return:
          type: System.String
          description: The extended details for the exception provided.
      implements:
      - Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.GetExtendedDetails(System.Exception)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy
    commentId: T:Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy
    language: CSharp
    name:
      CSharp: ITransientErrorDetectionStrategy
      VB: ITransientErrorDetectionStrategy
    nameWithType:
      CSharp: ITransientErrorDetectionStrategy
      VB: ITransientErrorDetectionStrategy
    qualifiedName:
      CSharp: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy
      VB: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy
    type: Interface
    assemblies:
    - Microsoft.Services.Core
    namespace: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
    source:
      remote:
        path: Product/source/Microsoft.Services.Core/Retries/ErrorDetectionStrategies/ITransientErrorDetectionStrategy.cs
        branch: master
        repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
      id: ITransientErrorDetectionStrategy
      path: Product/source/Microsoft.Services.Core/Retries/ErrorDetectionStrategies/ITransientErrorDetectionStrategy.cs
      startLine: 7
    summary: "\nDefines an interface which must be implemented by custom components responsible for detecting specific transient conditions.\n"
    example: []
    syntax:
      content:
        CSharp: public interface ITransientErrorDetectionStrategy
        VB: Public Interface ITransientErrorDetectionStrategy
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.IsTransient(System.Exception)
      commentId: M:Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.IsTransient(System.Exception)
      language: CSharp
      name:
        CSharp: IsTransient(Exception)
        VB: IsTransient(Exception)
      nameWithType:
        CSharp: ITransientErrorDetectionStrategy.IsTransient(Exception)
        VB: ITransientErrorDetectionStrategy.IsTransient(Exception)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.IsTransient(System.Exception)
        VB: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.IsTransient(System.Exception)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/ErrorDetectionStrategies/ITransientErrorDetectionStrategy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: IsTransient
        path: Product/source/Microsoft.Services.Core/Retries/ErrorDetectionStrategies/ITransientErrorDetectionStrategy.cs
        startLine: 14
      summary: "\nDetermines whether the specified exception represents a transient failure that can be compensated by a retry.\n"
      example: []
      syntax:
        content:
          CSharp: bool IsTransient(Exception ex)
          VB: Function IsTransient(ex As Exception) As Boolean
        parameters:
        - id: ex
          type: System.Exception
          description: The exception object to be verified.
        return:
          type: System.Boolean
          description: True if the specified exception is considered as transient, otherwise false.
      modifiers:
        CSharp: []
        VB: []
    - id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.GetExtendedDetails(System.Exception)
      commentId: M:Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.GetExtendedDetails(System.Exception)
      language: CSharp
      name:
        CSharp: GetExtendedDetails(Exception)
        VB: GetExtendedDetails(Exception)
      nameWithType:
        CSharp: ITransientErrorDetectionStrategy.GetExtendedDetails(Exception)
        VB: ITransientErrorDetectionStrategy.GetExtendedDetails(Exception)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.GetExtendedDetails(System.Exception)
        VB: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.GetExtendedDetails(System.Exception)
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/ErrorDetectionStrategies/ITransientErrorDetectionStrategy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: GetExtendedDetails
        path: Product/source/Microsoft.Services.Core/Retries/ErrorDetectionStrategies/ITransientErrorDetectionStrategy.cs
        startLine: 21
      summary: "\nGets the extended details for the exception provided.\n"
      example: []
      syntax:
        content:
          CSharp: string GetExtendedDetails(Exception ex)
          VB: Function GetExtendedDetails(ex As Exception) As String
        parameters:
        - id: ex
          type: System.Exception
          description: The exception.
        return:
          type: System.String
          description: The extended details for the exception provided.
      modifiers:
        CSharp: []
        VB: []
- id: Microsoft.Services.Core.Retries.RetryStrategies
  commentId: N:Microsoft.Services.Core.Retries.RetryStrategies
  language: CSharp
  name:
    CSharp: Microsoft.Services.Core.Retries.RetryStrategies
    VB: Microsoft.Services.Core.Retries.RetryStrategies
  nameWithType:
    CSharp: Microsoft.Services.Core.Retries.RetryStrategies
    VB: Microsoft.Services.Core.Retries.RetryStrategies
  qualifiedName:
    CSharp: Microsoft.Services.Core.Retries.RetryStrategies
    VB: Microsoft.Services.Core.Retries.RetryStrategies
  type: Namespace
  assemblies:
  - Microsoft.Services.Core
  modifiers: {}
  items:
  - id: Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff
    commentId: T:Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff
    language: CSharp
    name:
      CSharp: ExponentialBackoff
      VB: ExponentialBackoff
    nameWithType:
      CSharp: ExponentialBackoff
      VB: ExponentialBackoff
    qualifiedName:
      CSharp: Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff
      VB: Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff
    type: Class
    assemblies:
    - Microsoft.Services.Core
    namespace: Microsoft.Services.Core.Retries.RetryStrategies
    source:
      remote:
        path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/ExponentialBackoff.cs
        branch: master
        repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
      id: ExponentialBackoff
      path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/ExponentialBackoff.cs
      startLine: 7
    summary: "\nA retry strategy with backoff parameters for calculating the exponential delay between retries.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ExponentialBackoff : RetryStrategy'
        VB: >-
          Public Class ExponentialBackoff

              Inherits RetryStrategy
    inheritance:
    - System.Object
    - Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
    inheritedMembers:
    - Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientRetryCount
    - Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientBackoff
    - Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMaxBackoff
    - Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMinBackoff
    - Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultRetryInterval
    - Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.MaxRetryCount
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff.#ctor(System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)
      commentId: M:Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff.#ctor(System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)
      language: CSharp
      name:
        CSharp: ExponentialBackoff(Int32, TimeSpan, TimeSpan, TimeSpan)
        VB: ExponentialBackoff(Int32, TimeSpan, TimeSpan, TimeSpan)
      nameWithType:
        CSharp: ExponentialBackoff.ExponentialBackoff(Int32, TimeSpan, TimeSpan, TimeSpan)
        VB: ExponentialBackoff.ExponentialBackoff(Int32, TimeSpan, TimeSpan, TimeSpan)
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff.ExponentialBackoff(System.Int32, System.TimeSpan, System.TimeSpan, System.TimeSpan)
        VB: Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff.ExponentialBackoff(System.Int32, System.TimeSpan, System.TimeSpan, System.TimeSpan)
      type: Constructor
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries.RetryStrategies
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/ExponentialBackoff.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: .ctor
        path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/ExponentialBackoff.cs
        startLine: 20
      summary: "\nInitializes a new instance of the ExponentialBackoff class with the specified name, retry settings, and fast retry option.\n"
      example: []
      syntax:
        content:
          CSharp: public ExponentialBackoff(int maxRetryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff)
          VB: Public Sub New(maxRetryCount As Integer, minBackoff As TimeSpan, maxBackoff As TimeSpan, deltaBackoff As TimeSpan)
        parameters:
        - id: maxRetryCount
          type: System.Int32
          description: The maximum number of retry attempts.
        - id: minBackoff
          type: System.TimeSpan
          description: The minimum backoff time
        - id: maxBackoff
          type: System.TimeSpan
          description: The maximum backoff time.
        - id: deltaBackoff
          type: System.TimeSpan
          description: The value that will be used to calculate a random delta in the exponential delay between retries.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff.GetShouldRetry
      commentId: M:Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff.GetShouldRetry
      language: CSharp
      name:
        CSharp: GetShouldRetry()
        VB: GetShouldRetry()
      nameWithType:
        CSharp: ExponentialBackoff.GetShouldRetry()
        VB: ExponentialBackoff.GetShouldRetry()
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff.GetShouldRetry()
        VB: Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff.GetShouldRetry()
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries.RetryStrategies
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/ExponentialBackoff.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: GetShouldRetry
        path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/ExponentialBackoff.cs
        startLine: 34
      summary: "\nReturns the corresponding ShouldRetry delegate.\n"
      example: []
      syntax:
        content:
          CSharp: public override ShouldRetry GetShouldRetry()
          VB: Public Overrides Function GetShouldRetry As ShouldRetry
        return:
          type: Microsoft.Services.Core.Retries.ShouldRetry
          description: "\nThe ShouldRetry delegate.\n"
      overridden: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.GetShouldRetry
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
    commentId: T:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
    language: CSharp
    name:
      CSharp: RetryStrategy
      VB: RetryStrategy
    nameWithType:
      CSharp: RetryStrategy
      VB: RetryStrategy
    qualifiedName:
      CSharp: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
      VB: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
    type: Class
    assemblies:
    - Microsoft.Services.Core
    namespace: Microsoft.Services.Core.Retries.RetryStrategies
    source:
      remote:
        path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
        branch: master
        repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
      id: RetryStrategy
      path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
      startLine: 7
    summary: "\nRepresents a retry strategy that determines the number of retry attempts and the interval between retries.\n"
    example: []
    syntax:
      content:
        CSharp: public abstract class RetryStrategy
        VB: Public MustInherit Class RetryStrategy
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientRetryCount
      commentId: F:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientRetryCount
      language: CSharp
      name:
        CSharp: DefaultClientRetryCount
        VB: DefaultClientRetryCount
      nameWithType:
        CSharp: RetryStrategy.DefaultClientRetryCount
        VB: RetryStrategy.DefaultClientRetryCount
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientRetryCount
        VB: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientRetryCount
      type: Field
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries.RetryStrategies
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: DefaultClientRetryCount
        path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
        startLine: 12
      summary: "\nRepresents the default number of retry attempts.\n"
      example: []
      syntax:
        content:
          CSharp: public static readonly int DefaultClientRetryCount
          VB: Public Shared ReadOnly DefaultClientRetryCount As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientBackoff
      commentId: F:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientBackoff
      language: CSharp
      name:
        CSharp: DefaultClientBackoff
        VB: DefaultClientBackoff
      nameWithType:
        CSharp: RetryStrategy.DefaultClientBackoff
        VB: RetryStrategy.DefaultClientBackoff
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientBackoff
        VB: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientBackoff
      type: Field
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries.RetryStrategies
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: DefaultClientBackoff
        path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
        startLine: 17
      summary: "\nRepresents the default amount of time used when calculating a random delta in the exponential delay between retries.\n"
      example: []
      syntax:
        content:
          CSharp: public static readonly TimeSpan DefaultClientBackoff
          VB: Public Shared ReadOnly DefaultClientBackoff As TimeSpan
        return:
          type: System.TimeSpan
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMaxBackoff
      commentId: F:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMaxBackoff
      language: CSharp
      name:
        CSharp: DefaultMaxBackoff
        VB: DefaultMaxBackoff
      nameWithType:
        CSharp: RetryStrategy.DefaultMaxBackoff
        VB: RetryStrategy.DefaultMaxBackoff
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMaxBackoff
        VB: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMaxBackoff
      type: Field
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries.RetryStrategies
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: DefaultMaxBackoff
        path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
        startLine: 22
      summary: "\nRepresents the default maximum amount of time used when calculating the exponential delay between retries.\n"
      example: []
      syntax:
        content:
          CSharp: public static readonly TimeSpan DefaultMaxBackoff
          VB: Public Shared ReadOnly DefaultMaxBackoff As TimeSpan
        return:
          type: System.TimeSpan
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMinBackoff
      commentId: F:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMinBackoff
      language: CSharp
      name:
        CSharp: DefaultMinBackoff
        VB: DefaultMinBackoff
      nameWithType:
        CSharp: RetryStrategy.DefaultMinBackoff
        VB: RetryStrategy.DefaultMinBackoff
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMinBackoff
        VB: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMinBackoff
      type: Field
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries.RetryStrategies
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: DefaultMinBackoff
        path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
        startLine: 27
      summary: "\nRepresents the default minimum amount of time used when calculating the exponential delay between retries.\n"
      example: []
      syntax:
        content:
          CSharp: public static readonly TimeSpan DefaultMinBackoff
          VB: Public Shared ReadOnly DefaultMinBackoff As TimeSpan
        return:
          type: System.TimeSpan
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultRetryInterval
      commentId: F:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultRetryInterval
      language: CSharp
      name:
        CSharp: DefaultRetryInterval
        VB: DefaultRetryInterval
      nameWithType:
        CSharp: RetryStrategy.DefaultRetryInterval
        VB: RetryStrategy.DefaultRetryInterval
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultRetryInterval
        VB: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultRetryInterval
      type: Field
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries.RetryStrategies
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: DefaultRetryInterval
        path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
        startLine: 32
      summary: "\nRepresents the default interval between retries.\n"
      example: []
      syntax:
        content:
          CSharp: public static readonly TimeSpan DefaultRetryInterval
          VB: Public Shared ReadOnly DefaultRetryInterval As TimeSpan
        return:
          type: System.TimeSpan
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.MaxRetryCount
      commentId: P:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.MaxRetryCount
      language: CSharp
      name:
        CSharp: MaxRetryCount
        VB: MaxRetryCount
      nameWithType:
        CSharp: RetryStrategy.MaxRetryCount
        VB: RetryStrategy.MaxRetryCount
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.MaxRetryCount
        VB: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.MaxRetryCount
      type: Property
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries.RetryStrategies
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: MaxRetryCount
        path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
        startLine: 37
      summary: "\nGets or sets the maximum retry count.\n"
      example: []
      syntax:
        content:
          CSharp: public int MaxRetryCount { get; set; }
          VB: Public Property MaxRetryCount As Integer
        parameters: []
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.GetShouldRetry
      commentId: M:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.GetShouldRetry
      language: CSharp
      name:
        CSharp: GetShouldRetry()
        VB: GetShouldRetry()
      nameWithType:
        CSharp: RetryStrategy.GetShouldRetry()
        VB: RetryStrategy.GetShouldRetry()
      qualifiedName:
        CSharp: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.GetShouldRetry()
        VB: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.GetShouldRetry()
      type: Method
      assemblies:
      - Microsoft.Services.Core
      namespace: Microsoft.Services.Core.Retries.RetryStrategies
      source:
        remote:
          path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
          branch: master
          repo: https://msdata.visualstudio.com/HDInsight/_git/Common-CSharp
        id: GetShouldRetry
        path: Product/source/Microsoft.Services.Core/Retries/RetryStrategies/RetryStrategy.cs
        startLine: 45
      summary: "\nReturns the corresponding ShouldRetry delegate.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract ShouldRetry GetShouldRetry()
          VB: Public MustOverride Function GetShouldRetry As ShouldRetry
        return:
          type: Microsoft.Services.Core.Retries.ShouldRetry
          description: "\nThe ShouldRetry delegate.\n"
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  System.Exception:
    name:
      CSharp:
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      VB:
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Exception
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Microsoft.Services.Core.ExceptionHelper:
    name:
      CSharp:
      - id: Microsoft.Services.Core.ExceptionHelper
        name: ExceptionHelper
        nameWithType: ExceptionHelper
        qualifiedName: Microsoft.Services.Core.ExceptionHelper
      VB:
      - id: Microsoft.Services.Core.ExceptionHelper
        name: ExceptionHelper
        nameWithType: ExceptionHelper
        qualifiedName: Microsoft.Services.Core.ExceptionHelper
    isDefinition: true
    commentId: T:Microsoft.Services.Core.ExceptionHelper
  System.Diagnostics.Contracts:
    commentId: N:System.Diagnostics.Contracts
  System.ArgumentNullException:
    commentId: T:System.ArgumentNullException
  System.ArgumentException:
    commentId: T:System.ArgumentException
  Microsoft.Services.Core.Contract:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Contract
        name: Contract
        nameWithType: Contract
        qualifiedName: Microsoft.Services.Core.Contract
      VB:
      - id: Microsoft.Services.Core.Contract
        name: Contract
        nameWithType: Contract
        qualifiedName: Microsoft.Services.Core.Contract
    isDefinition: true
    commentId: T:Microsoft.Services.Core.Contract
  System.Attribute:
    name:
      CSharp:
      - id: System.Attribute
        name: Attribute
        nameWithType: Attribute
        qualifiedName: System.Attribute
        isExternal: true
      VB:
      - id: System.Attribute
        name: Attribute
        nameWithType: Attribute
        qualifiedName: System.Attribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Attribute
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
  System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.Module):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)
  System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
  System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.Equals(System.Object):
    name:
      CSharp:
      - id: System.Attribute.Equals(System.Object)
        name: Equals
        nameWithType: Attribute.Equals
        qualifiedName: System.Attribute.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.Equals(System.Object)
        name: Equals
        nameWithType: Attribute.Equals
        qualifiedName: System.Attribute.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.Equals(System.Object)
  System.Attribute.GetHashCode:
    name:
      CSharp:
      - id: System.Attribute.GetHashCode
        name: GetHashCode
        nameWithType: Attribute.GetHashCode
        qualifiedName: System.Attribute.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetHashCode
        name: GetHashCode
        nameWithType: Attribute.GetHashCode
        qualifiedName: System.Attribute.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetHashCode
  System.Attribute.Match(System.Object):
    name:
      CSharp:
      - id: System.Attribute.Match(System.Object)
        name: Match
        nameWithType: Attribute.Match
        qualifiedName: System.Attribute.Match
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.Match(System.Object)
        name: Match
        nameWithType: Attribute.Match
        qualifiedName: System.Attribute.Match
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.Match(System.Object)
  System.Attribute.IsDefaultAttribute:
    name:
      CSharp:
      - id: System.Attribute.IsDefaultAttribute
        name: IsDefaultAttribute
        nameWithType: Attribute.IsDefaultAttribute
        qualifiedName: System.Attribute.IsDefaultAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefaultAttribute
        name: IsDefaultAttribute
        nameWithType: Attribute.IsDefaultAttribute
        qualifiedName: System.Attribute.IsDefaultAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefaultAttribute
  System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@):
    name:
      CSharp:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
        name: _Attribute.GetTypeInfoCount
        nameWithType: Attribute._Attribute.GetTypeInfoCount
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
        name: System.Runtime.InteropServices._Attribute.GetTypeInfoCount
        nameWithType: Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
  System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr):
    name:
      CSharp:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
        name: _Attribute.GetTypeInfo
        nameWithType: Attribute._Attribute.GetTypeInfo
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
        name: System.Runtime.InteropServices._Attribute.GetTypeInfo
        nameWithType: Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  ? System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  : name:
      CSharp:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
        name: _Attribute.GetIDsOfNames
        nameWithType: Attribute._Attribute.GetIDsOfNames
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
        name: System.Runtime.InteropServices._Attribute.GetIDsOfNames
        nameWithType: Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  ? System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  : name:
      CSharp:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
        name: _Attribute.Invoke
        nameWithType: Attribute._Attribute.Invoke
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.Invoke
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
        name: System.Runtime.InteropServices._Attribute.Invoke
        nameWithType: Attribute.System.Runtime.InteropServices._Attribute.Invoke
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.Invoke
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  System.Attribute.TypeId:
    name:
      CSharp:
      - id: System.Attribute.TypeId
        name: TypeId
        nameWithType: Attribute.TypeId
        qualifiedName: System.Attribute.TypeId
        isExternal: true
      VB:
      - id: System.Attribute.TypeId
        name: TypeId
        nameWithType: Attribute.TypeId
        qualifiedName: System.Attribute.TypeId
        isExternal: true
    isDefinition: true
    parent: System.Attribute
    commentId: P:System.Attribute.TypeId
  System.Runtime.InteropServices:
    name:
      CSharp:
      - name: System.Runtime.InteropServices
        nameWithType: System.Runtime.InteropServices
        qualifiedName: System.Runtime.InteropServices
      VB:
      - name: System.Runtime.InteropServices
        nameWithType: System.Runtime.InteropServices
        qualifiedName: System.Runtime.InteropServices
    isDefinition: true
    commentId: N:System.Runtime.InteropServices
  System.Runtime.InteropServices._Attribute:
    name:
      CSharp:
      - id: System.Runtime.InteropServices._Attribute
        name: _Attribute
        nameWithType: _Attribute
        qualifiedName: System.Runtime.InteropServices._Attribute
        isExternal: true
      VB:
      - id: System.Runtime.InteropServices._Attribute
        name: _Attribute
        nameWithType: _Attribute
        qualifiedName: System.Runtime.InteropServices._Attribute
        isExternal: true
    isDefinition: true
    parent: System.Runtime.InteropServices
    commentId: T:System.Runtime.InteropServices._Attribute
  Microsoft.Services.Core.StringValueAttribute:
    name:
      CSharp:
      - id: Microsoft.Services.Core.StringValueAttribute
        name: StringValueAttribute
        nameWithType: StringValueAttribute
        qualifiedName: Microsoft.Services.Core.StringValueAttribute
      VB:
      - id: Microsoft.Services.Core.StringValueAttribute
        name: StringValueAttribute
        nameWithType: StringValueAttribute
        qualifiedName: Microsoft.Services.Core.StringValueAttribute
    isDefinition: true
    commentId: T:Microsoft.Services.Core.StringValueAttribute
  System.AttributeUsageAttribute:
    name:
      CSharp:
      - id: System.AttributeUsageAttribute
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute
        isExternal: true
      VB:
      - id: System.AttributeUsageAttribute
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.AttributeUsageAttribute
  System.AttributeUsageAttribute.#ctor(System.AttributeTargets):
    name:
      CSharp:
      - id: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute.AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute.AttributeUsageAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute.AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute.AttributeUsageAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.AttributeUsageAttribute
    commentId: M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
  System.AttributeTargets:
    name:
      CSharp:
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      VB:
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.AttributeTargets
  System.Enum:
    name:
      CSharp:
      - id: System.Enum
        name: Enum
        nameWithType: Enum
        qualifiedName: System.Enum
        isExternal: true
      VB:
      - id: System.Enum
        name: Enum
        nameWithType: Enum
        qualifiedName: System.Enum
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Enum
  Microsoft.Services.Core.StringValueAttributeExtensions:
    name:
      CSharp:
      - id: Microsoft.Services.Core.StringValueAttributeExtensions
        name: StringValueAttributeExtensions
        nameWithType: StringValueAttributeExtensions
        qualifiedName: Microsoft.Services.Core.StringValueAttributeExtensions
      VB:
      - id: Microsoft.Services.Core.StringValueAttributeExtensions
        name: StringValueAttributeExtensions
        nameWithType: StringValueAttributeExtensions
        qualifiedName: Microsoft.Services.Core.StringValueAttributeExtensions
    isDefinition: true
    commentId: T:Microsoft.Services.Core.StringValueAttributeExtensions
  Microsoft.Services.Core:
    name:
      CSharp:
      - name: Microsoft.Services.Core
        nameWithType: Microsoft.Services.Core
        qualifiedName: Microsoft.Services.Core
      VB:
      - name: Microsoft.Services.Core
        nameWithType: Microsoft.Services.Core
        qualifiedName: Microsoft.Services.Core
    isDefinition: true
    commentId: N:Microsoft.Services.Core
  System.IDisposable:
    name:
      CSharp:
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      VB:
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.IDisposable
  Microsoft.Services.Core.Process.JobObjectLimit:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Process.JobObjectLimit
        name: JobObjectLimit
        nameWithType: JobObjectLimit
        qualifiedName: Microsoft.Services.Core.Process.JobObjectLimit
      VB:
      - id: Microsoft.Services.Core.Process.JobObjectLimit
        name: JobObjectLimit
        nameWithType: JobObjectLimit
        qualifiedName: Microsoft.Services.Core.Process.JobObjectLimit
    isDefinition: true
    parent: Microsoft.Services.Core.Process
    commentId: T:Microsoft.Services.Core.Process.JobObjectLimit
  Microsoft.Services.Core.Process:
    name:
      CSharp:
      - name: Microsoft.Services.Core.Process
        nameWithType: Microsoft.Services.Core.Process
        qualifiedName: Microsoft.Services.Core.Process
      VB:
      - name: Microsoft.Services.Core.Process
        nameWithType: Microsoft.Services.Core.Process
        qualifiedName: Microsoft.Services.Core.Process
    isDefinition: true
    commentId: N:Microsoft.Services.Core.Process
  Microsoft.Win32.SafeHandles:
    name:
      CSharp:
      - name: Microsoft.Win32.SafeHandles
        nameWithType: Microsoft.Win32.SafeHandles
        qualifiedName: Microsoft.Win32.SafeHandles
      VB:
      - name: Microsoft.Win32.SafeHandles
        nameWithType: Microsoft.Win32.SafeHandles
        qualifiedName: Microsoft.Win32.SafeHandles
    isDefinition: true
    commentId: N:Microsoft.Win32.SafeHandles
  Microsoft.Win32.SafeHandles.SafeProcessHandle:
    name:
      CSharp:
      - id: Microsoft.Win32.SafeHandles.SafeProcessHandle
        name: SafeProcessHandle
        nameWithType: SafeProcessHandle
        qualifiedName: Microsoft.Win32.SafeHandles.SafeProcessHandle
        isExternal: true
      VB:
      - id: Microsoft.Win32.SafeHandles.SafeProcessHandle
        name: SafeProcessHandle
        nameWithType: SafeProcessHandle
        qualifiedName: Microsoft.Win32.SafeHandles.SafeProcessHandle
        isExternal: true
    isDefinition: true
    parent: Microsoft.Win32.SafeHandles
    commentId: T:Microsoft.Win32.SafeHandles.SafeProcessHandle
  System.Diagnostics:
    name:
      CSharp:
      - name: System.Diagnostics
        nameWithType: System.Diagnostics
        qualifiedName: System.Diagnostics
      VB:
      - name: System.Diagnostics
        nameWithType: System.Diagnostics
        qualifiedName: System.Diagnostics
    isDefinition: true
    commentId: N:System.Diagnostics
  System.Diagnostics.Process:
    name:
      CSharp:
      - id: System.Diagnostics.Process
        name: Process
        nameWithType: Process
        qualifiedName: System.Diagnostics.Process
        isExternal: true
      VB:
      - id: System.Diagnostics.Process
        name: Process
        nameWithType: Process
        qualifiedName: System.Diagnostics.Process
        isExternal: true
    isDefinition: true
    parent: System.Diagnostics
    commentId: T:System.Diagnostics.Process
  System.IDisposable.Dispose:
    name:
      CSharp:
      - id: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        qualifiedName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        qualifiedName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.IDisposable
    commentId: M:System.IDisposable.Dispose
  Microsoft.Services.Core.Process.JobObject:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Process.JobObject
        name: JobObject
        nameWithType: JobObject
        qualifiedName: Microsoft.Services.Core.Process.JobObject
      VB:
      - id: Microsoft.Services.Core.Process.JobObject
        name: JobObject
        nameWithType: JobObject
        qualifiedName: Microsoft.Services.Core.Process.JobObject
    isDefinition: true
    commentId: T:Microsoft.Services.Core.Process.JobObject
  Microsoft.Services.Core.Process.JobObjectLimit.SetProcessworkingSetMemory(System.UInt64,System.UInt64):
    commentId: M:Microsoft.Services.Core.Process.JobObjectLimit.SetProcessworkingSetMemory(System.UInt64,System.UInt64)
  System.UInt64:
    name:
      CSharp:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
      VB:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt64
  Microsoft.Services.Core.Process.JobObjectLimit.SetProcessCommitMemory(System.UInt64):
    commentId: M:Microsoft.Services.Core.Process.JobObjectLimit.SetProcessCommitMemory(System.UInt64)
  Microsoft.Services.Core.Process.JobObjectLimit.SetMaxActiveProcesses(System.UInt32):
    commentId: M:Microsoft.Services.Core.Process.JobObjectLimit.SetMaxActiveProcesses(System.UInt32)
  System.UInt32:
    name:
      CSharp:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      VB:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt32
  Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32):
    commentId: M:Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32)
  Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32,System.UInt32):
    commentId: M:Microsoft.Services.Core.Process.JobObjectLimit.SetCpuLimit(System.UInt32,System.UInt32)
  System.Collections.Generic.ISet`1:
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1
        name: ISet
        nameWithType: ISet
        qualifiedName: System.Collections.Generic.ISet
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.ISet`1
        name: ISet
        nameWithType: ISet
        qualifiedName: System.Collections.Generic.ISet
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.ISet`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.ISet{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1
        name: ISet
        nameWithType: ISet
        qualifiedName: System.Collections.Generic.ISet
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.ISet`1
        name: ISet
        nameWithType: ISet
        qualifiedName: System.Collections.Generic.ISet
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ISet`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.ISet{`0}
  System.Collections.Generic.ICollection`1:
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.ICollection`1
  System.Collections.Generic.ICollection{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ICollection`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.ICollection{`0}
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic.IEnumerable{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{`0}
  System.Collections:
    name:
      CSharp:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
      VB:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
    isDefinition: true
    commentId: N:System.Collections
  System.Collections.IEnumerable:
    name:
      CSharp:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
      VB:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerable
  System.Collections.Generic.IEqualityComparer`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEqualityComparer`1
  System.Collections.Generic.IEqualityComparer{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEqualityComparer`1
        name: IEqualityComparer
        nameWithType: IEqualityComparer
        qualifiedName: System.Collections.Generic.IEqualityComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEqualityComparer`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  Microsoft.Services.Core.Collections.ConcurrentHashSet`1:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1
        name: ConcurrentHashSet
        nameWithType: ConcurrentHashSet
        qualifiedName: Microsoft.Services.Core.Collections.ConcurrentHashSet
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Microsoft.Services.Core.Collections.ConcurrentHashSet`1
        name: ConcurrentHashSet
        nameWithType: ConcurrentHashSet
        qualifiedName: Microsoft.Services.Core.Collections.ConcurrentHashSet
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Microsoft.Services.Core.Collections.ConcurrentHashSet`1
  System.Collections.Generic.IEnumerator`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerator`1
  System.Collections.Generic.IEnumerator{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerator`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerator{`0}
  System.Collections.Generic.IEnumerable`1.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable<T>.GetEnumerator
        qualifiedName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.IEnumerable`1.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable(Of T).GetEnumerator
        qualifiedName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  System.Collections.Generic.IEnumerable{{T}}.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable<T>.GetEnumerator
        qualifiedName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.IEnumerable`1.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable(Of T).GetEnumerator
        qualifiedName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
    parent: System.Collections.Generic.IEnumerable{{T}}
    commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  System.Collections.IEnumerator:
    name:
      CSharp:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
      VB:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerator
  System.Collections.IEnumerable.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.IEnumerable.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable.GetEnumerator
        qualifiedName: System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.IEnumerable.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable.GetEnumerator
        qualifiedName: System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Collections.IEnumerable
    commentId: M:System.Collections.IEnumerable.GetEnumerator
  System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
        name: UnionWith
        nameWithType: ISet<T>.UnionWith
        qualifiedName: System.Collections.Generic.ISet<T>.UnionWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
        name: UnionWith
        nameWithType: ISet(Of T).UnionWith
        qualifiedName: System.Collections.Generic.ISet(Of T).UnionWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet{{T}}.UnionWith(System.Collections.Generic.IEnumerable{{T}}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
        name: UnionWith
        nameWithType: ISet<T>.UnionWith
        qualifiedName: System.Collections.Generic.ISet<T>.UnionWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
        name: UnionWith
        nameWithType: ISet(Of T).UnionWith
        qualifiedName: System.Collections.Generic.ISet(Of T).UnionWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    parent: System.Collections.Generic.ISet{{T}}
    commentId: M:System.Collections.Generic.ISet{`0}.UnionWith(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
        name: IntersectWith
        nameWithType: ISet<T>.IntersectWith
        qualifiedName: System.Collections.Generic.ISet<T>.IntersectWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
        name: IntersectWith
        nameWithType: ISet(Of T).IntersectWith
        qualifiedName: System.Collections.Generic.ISet(Of T).IntersectWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet{{T}}.IntersectWith(System.Collections.Generic.IEnumerable{{T}}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
        name: IntersectWith
        nameWithType: ISet<T>.IntersectWith
        qualifiedName: System.Collections.Generic.ISet<T>.IntersectWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
        name: IntersectWith
        nameWithType: ISet(Of T).IntersectWith
        qualifiedName: System.Collections.Generic.ISet(Of T).IntersectWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    parent: System.Collections.Generic.ISet{{T}}
    commentId: M:System.Collections.Generic.ISet{`0}.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
        name: ExceptWith
        nameWithType: ISet<T>.ExceptWith
        qualifiedName: System.Collections.Generic.ISet<T>.ExceptWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
        name: ExceptWith
        nameWithType: ISet(Of T).ExceptWith
        qualifiedName: System.Collections.Generic.ISet(Of T).ExceptWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet{{T}}.ExceptWith(System.Collections.Generic.IEnumerable{{T}}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
        name: ExceptWith
        nameWithType: ISet<T>.ExceptWith
        qualifiedName: System.Collections.Generic.ISet<T>.ExceptWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
        name: ExceptWith
        nameWithType: ISet(Of T).ExceptWith
        qualifiedName: System.Collections.Generic.ISet(Of T).ExceptWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    parent: System.Collections.Generic.ISet{{T}}
    commentId: M:System.Collections.Generic.ISet{`0}.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
        name: SymmetricExceptWith
        nameWithType: ISet<T>.SymmetricExceptWith
        qualifiedName: System.Collections.Generic.ISet<T>.SymmetricExceptWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
        name: SymmetricExceptWith
        nameWithType: ISet(Of T).SymmetricExceptWith
        qualifiedName: System.Collections.Generic.ISet(Of T).SymmetricExceptWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet{{T}}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{{T}}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
        name: SymmetricExceptWith
        nameWithType: ISet<T>.SymmetricExceptWith
        qualifiedName: System.Collections.Generic.ISet<T>.SymmetricExceptWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
        name: SymmetricExceptWith
        nameWithType: ISet(Of T).SymmetricExceptWith
        qualifiedName: System.Collections.Generic.ISet(Of T).SymmetricExceptWith
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    parent: System.Collections.Generic.ISet{{T}}
    commentId: M:System.Collections.Generic.ISet{`0}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsSubsetOf
        nameWithType: ISet<T>.IsSubsetOf
        qualifiedName: System.Collections.Generic.ISet<T>.IsSubsetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsSubsetOf
        nameWithType: ISet(Of T).IsSubsetOf
        qualifiedName: System.Collections.Generic.ISet(Of T).IsSubsetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet{{T}}.IsSubsetOf(System.Collections.Generic.IEnumerable{{T}}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsSubsetOf
        nameWithType: ISet<T>.IsSubsetOf
        qualifiedName: System.Collections.Generic.ISet<T>.IsSubsetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsSubsetOf
        nameWithType: ISet(Of T).IsSubsetOf
        qualifiedName: System.Collections.Generic.ISet(Of T).IsSubsetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    parent: System.Collections.Generic.ISet{{T}}
    commentId: M:System.Collections.Generic.ISet{`0}.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsSupersetOf
        nameWithType: ISet<T>.IsSupersetOf
        qualifiedName: System.Collections.Generic.ISet<T>.IsSupersetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsSupersetOf
        nameWithType: ISet(Of T).IsSupersetOf
        qualifiedName: System.Collections.Generic.ISet(Of T).IsSupersetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet{{T}}.IsSupersetOf(System.Collections.Generic.IEnumerable{{T}}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsSupersetOf
        nameWithType: ISet<T>.IsSupersetOf
        qualifiedName: System.Collections.Generic.ISet<T>.IsSupersetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsSupersetOf
        nameWithType: ISet(Of T).IsSupersetOf
        qualifiedName: System.Collections.Generic.ISet(Of T).IsSupersetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    parent: System.Collections.Generic.ISet{{T}}
    commentId: M:System.Collections.Generic.ISet{`0}.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsProperSupersetOf
        nameWithType: ISet<T>.IsProperSupersetOf
        qualifiedName: System.Collections.Generic.ISet<T>.IsProperSupersetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsProperSupersetOf
        nameWithType: ISet(Of T).IsProperSupersetOf
        qualifiedName: System.Collections.Generic.ISet(Of T).IsProperSupersetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet{{T}}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{{T}}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsProperSupersetOf
        nameWithType: ISet<T>.IsProperSupersetOf
        qualifiedName: System.Collections.Generic.ISet<T>.IsProperSupersetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsProperSupersetOf
        nameWithType: ISet(Of T).IsProperSupersetOf
        qualifiedName: System.Collections.Generic.ISet(Of T).IsProperSupersetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    parent: System.Collections.Generic.ISet{{T}}
    commentId: M:System.Collections.Generic.ISet{`0}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsProperSubsetOf
        nameWithType: ISet<T>.IsProperSubsetOf
        qualifiedName: System.Collections.Generic.ISet<T>.IsProperSubsetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsProperSubsetOf
        nameWithType: ISet(Of T).IsProperSubsetOf
        qualifiedName: System.Collections.Generic.ISet(Of T).IsProperSubsetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet{{T}}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{{T}}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsProperSubsetOf
        nameWithType: ISet<T>.IsProperSubsetOf
        qualifiedName: System.Collections.Generic.ISet<T>.IsProperSubsetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
        name: IsProperSubsetOf
        nameWithType: ISet(Of T).IsProperSubsetOf
        qualifiedName: System.Collections.Generic.ISet(Of T).IsProperSubsetOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    parent: System.Collections.Generic.ISet{{T}}
    commentId: M:System.Collections.Generic.ISet{`0}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
        name: Overlaps
        nameWithType: ISet<T>.Overlaps
        qualifiedName: System.Collections.Generic.ISet<T>.Overlaps
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
        name: Overlaps
        nameWithType: ISet(Of T).Overlaps
        qualifiedName: System.Collections.Generic.ISet(Of T).Overlaps
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet{{T}}.Overlaps(System.Collections.Generic.IEnumerable{{T}}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
        name: Overlaps
        nameWithType: ISet<T>.Overlaps
        qualifiedName: System.Collections.Generic.ISet<T>.Overlaps
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
        name: Overlaps
        nameWithType: ISet(Of T).Overlaps
        qualifiedName: System.Collections.Generic.ISet(Of T).Overlaps
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    parent: System.Collections.Generic.ISet{{T}}
    commentId: M:System.Collections.Generic.ISet{`0}.Overlaps(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
        name: SetEquals
        nameWithType: ISet<T>.SetEquals
        qualifiedName: System.Collections.Generic.ISet<T>.SetEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
        name: SetEquals
        nameWithType: ISet(Of T).SetEquals
        qualifiedName: System.Collections.Generic.ISet(Of T).SetEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet{{T}}.SetEquals(System.Collections.Generic.IEnumerable{{T}}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
        name: SetEquals
        nameWithType: ISet<T>.SetEquals
        qualifiedName: System.Collections.Generic.ISet<T>.SetEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
        name: SetEquals
        nameWithType: ISet(Of T).SetEquals
        qualifiedName: System.Collections.Generic.ISet(Of T).SetEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    parent: System.Collections.Generic.ISet{{T}}
    commentId: M:System.Collections.Generic.ISet{`0}.SetEquals(System.Collections.Generic.IEnumerable{`0})
  System.Collections.Generic.ISet`1.Add(`0):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.Add(`0)
        name: Add
        nameWithType: ISet<T>.Add
        qualifiedName: System.Collections.Generic.ISet<T>.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.Add(`0)
        name: Add
        nameWithType: ISet(Of T).Add
        qualifiedName: System.Collections.Generic.ISet(Of T).Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ISet`1.Add(`0)
  System.Collections.Generic.ISet{{T}}.Add({T}):
    name:
      CSharp:
      - id: System.Collections.Generic.ISet`1.Add(`0)
        name: Add
        nameWithType: ISet<T>.Add
        qualifiedName: System.Collections.Generic.ISet<T>.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ISet`1.Add(`0)
        name: Add
        nameWithType: ISet(Of T).Add
        qualifiedName: System.Collections.Generic.ISet(Of T).Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ISet`1.Add(`0)
    parent: System.Collections.Generic.ISet{{T}}
    commentId: M:System.Collections.Generic.ISet{`0}.Add(`0)
  System.Collections.Generic.ICollection`1.Add(`0):
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1.Add(`0)
        name: Add
        nameWithType: ICollection<T>.Add
        qualifiedName: System.Collections.Generic.ICollection<T>.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ICollection`1.Add(`0)
        name: Add
        nameWithType: ICollection(Of T).Add
        qualifiedName: System.Collections.Generic.ICollection(Of T).Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  System.Collections.Generic.ICollection{{T}}.Add({T}):
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1.Add(`0)
        name: Add
        nameWithType: ICollection<T>.Add
        qualifiedName: System.Collections.Generic.ICollection<T>.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ICollection`1.Add(`0)
        name: Add
        nameWithType: ICollection(Of T).Add
        qualifiedName: System.Collections.Generic.ICollection(Of T).Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ICollection`1.Add(`0)
    parent: System.Collections.Generic.ICollection{{T}}
    commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  System.Collections.Generic.ICollection`1.Clear:
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1.Clear
        name: Clear
        nameWithType: ICollection<T>.Clear
        qualifiedName: System.Collections.Generic.ICollection<T>.Clear
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ICollection`1.Clear
        name: Clear
        nameWithType: ICollection(Of T).Clear
        qualifiedName: System.Collections.Generic.ICollection(Of T).Clear
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ICollection`1.Clear
  System.Collections.Generic.ICollection{{T}}.Clear:
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1.Clear
        name: Clear
        nameWithType: ICollection<T>.Clear
        qualifiedName: System.Collections.Generic.ICollection<T>.Clear
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ICollection`1.Clear
        name: Clear
        nameWithType: ICollection(Of T).Clear
        qualifiedName: System.Collections.Generic.ICollection(Of T).Clear
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ICollection`1.Clear
    parent: System.Collections.Generic.ICollection{{T}}
    commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  System.Collections.Generic.ICollection`1.Contains(`0):
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1.Contains(`0)
        name: Contains
        nameWithType: ICollection<T>.Contains
        qualifiedName: System.Collections.Generic.ICollection<T>.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ICollection`1.Contains(`0)
        name: Contains
        nameWithType: ICollection(Of T).Contains
        qualifiedName: System.Collections.Generic.ICollection(Of T).Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  System.Collections.Generic.ICollection{{T}}.Contains({T}):
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1.Contains(`0)
        name: Contains
        nameWithType: ICollection<T>.Contains
        qualifiedName: System.Collections.Generic.ICollection<T>.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ICollection`1.Contains(`0)
        name: Contains
        nameWithType: ICollection(Of T).Contains
        qualifiedName: System.Collections.Generic.ICollection(Of T).Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ICollection`1.Contains(`0)
    parent: System.Collections.Generic.ICollection{{T}}
    commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  '{T}[]':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
        name: CopyTo
        nameWithType: ICollection<T>.CopyTo
        qualifiedName: System.Collections.Generic.ICollection<T>.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
        name: CopyTo
        nameWithType: ICollection(Of T).CopyTo
        qualifiedName: System.Collections.Generic.ICollection(Of T).CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
        name: CopyTo
        nameWithType: ICollection<T>.CopyTo
        qualifiedName: System.Collections.Generic.ICollection<T>.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
        name: CopyTo
        nameWithType: ICollection(Of T).CopyTo
        qualifiedName: System.Collections.Generic.ICollection(Of T).CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    parent: System.Collections.Generic.ICollection{{T}}
    commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  System.Collections.Generic.ICollection`1.Remove(`0):
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1.Remove(`0)
        name: Remove
        nameWithType: ICollection<T>.Remove
        qualifiedName: System.Collections.Generic.ICollection<T>.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ICollection`1.Remove(`0)
        name: Remove
        nameWithType: ICollection(Of T).Remove
        qualifiedName: System.Collections.Generic.ICollection(Of T).Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  System.Collections.Generic.ICollection{{T}}.Remove({T}):
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1.Remove(`0)
        name: Remove
        nameWithType: ICollection<T>.Remove
        qualifiedName: System.Collections.Generic.ICollection<T>.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.ICollection`1.Remove(`0)
        name: Remove
        nameWithType: ICollection(Of T).Remove
        qualifiedName: System.Collections.Generic.ICollection(Of T).Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ICollection`1.Remove(`0)
    parent: System.Collections.Generic.ICollection{{T}}
    commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  System.Collections.Generic.ICollection`1.Count:
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1.Count
        name: Count
        nameWithType: ICollection<T>.Count
        qualifiedName: System.Collections.Generic.ICollection<T>.Count
        isExternal: true
      VB:
      - id: System.Collections.Generic.ICollection`1.Count
        name: Count
        nameWithType: ICollection(Of T).Count
        qualifiedName: System.Collections.Generic.ICollection(Of T).Count
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.ICollection`1.Count
  System.Collections.Generic.ICollection{{T}}.Count:
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1.Count
        name: Count
        nameWithType: ICollection<T>.Count
        qualifiedName: System.Collections.Generic.ICollection<T>.Count
        isExternal: true
      VB:
      - id: System.Collections.Generic.ICollection`1.Count
        name: Count
        nameWithType: ICollection(Of T).Count
        qualifiedName: System.Collections.Generic.ICollection(Of T).Count
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.ICollection`1.Count
    parent: System.Collections.Generic.ICollection{{T}}
    commentId: P:System.Collections.Generic.ICollection{`0}.Count
  System.Collections.Generic.ICollection`1.IsReadOnly:
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1.IsReadOnly
        name: IsReadOnly
        nameWithType: ICollection<T>.IsReadOnly
        qualifiedName: System.Collections.Generic.ICollection<T>.IsReadOnly
        isExternal: true
      VB:
      - id: System.Collections.Generic.ICollection`1.IsReadOnly
        name: IsReadOnly
        nameWithType: ICollection(Of T).IsReadOnly
        qualifiedName: System.Collections.Generic.ICollection(Of T).IsReadOnly
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  System.Collections.Generic.ICollection{{T}}.IsReadOnly:
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1.IsReadOnly
        name: IsReadOnly
        nameWithType: ICollection<T>.IsReadOnly
        qualifiedName: System.Collections.Generic.ICollection<T>.IsReadOnly
        isExternal: true
      VB:
      - id: System.Collections.Generic.ICollection`1.IsReadOnly
        name: IsReadOnly
        nameWithType: ICollection(Of T).IsReadOnly
        qualifiedName: System.Collections.Generic.ICollection(Of T).IsReadOnly
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.ICollection`1.IsReadOnly
    parent: System.Collections.Generic.ICollection{{T}}
    commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  Microsoft.Services.Core.Collections:
    name:
      CSharp:
      - name: Microsoft.Services.Core.Collections
        nameWithType: Microsoft.Services.Core.Collections
        qualifiedName: Microsoft.Services.Core.Collections
      VB:
      - name: Microsoft.Services.Core.Collections
        nameWithType: Microsoft.Services.Core.Collections
        qualifiedName: Microsoft.Services.Core.Collections
    isDefinition: true
    commentId: N:Microsoft.Services.Core.Collections
  System.EventArgs:
    name:
      CSharp:
      - id: System.EventArgs
        name: EventArgs
        nameWithType: EventArgs
        qualifiedName: System.EventArgs
        isExternal: true
      VB:
      - id: System.EventArgs
        name: EventArgs
        nameWithType: EventArgs
        qualifiedName: System.EventArgs
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.EventArgs
  System.EventArgs.Empty:
    name:
      CSharp:
      - id: System.EventArgs.Empty
        name: Empty
        nameWithType: EventArgs.Empty
        qualifiedName: System.EventArgs.Empty
        isExternal: true
      VB:
      - id: System.EventArgs.Empty
        name: Empty
        nameWithType: EventArgs.Empty
        qualifiedName: System.EventArgs.Empty
        isExternal: true
    isDefinition: true
    parent: System.EventArgs
    commentId: F:System.EventArgs.Empty
  System.TimeSpan:
    name:
      CSharp:
      - id: System.TimeSpan
        name: TimeSpan
        nameWithType: TimeSpan
        qualifiedName: System.TimeSpan
        isExternal: true
      VB:
      - id: System.TimeSpan
        name: TimeSpan
        nameWithType: TimeSpan
        qualifiedName: System.TimeSpan
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.TimeSpan
  Hyak.Common.TransientFaultHandling.RetryingEventArgs:
    commentId: T:Hyak.Common.TransientFaultHandling.RetryingEventArgs
  Microsoft.Services.Core.Retries.RetryingEventArgs:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.RetryingEventArgs
        name: RetryingEventArgs
        nameWithType: RetryingEventArgs
        qualifiedName: Microsoft.Services.Core.Retries.RetryingEventArgs
      VB:
      - id: Microsoft.Services.Core.Retries.RetryingEventArgs
        name: RetryingEventArgs
        nameWithType: RetryingEventArgs
        qualifiedName: Microsoft.Services.Core.Retries.RetryingEventArgs
    isDefinition: true
    commentId: T:Microsoft.Services.Core.Retries.RetryingEventArgs
  Microsoft.Services.Core.Retries.ErrorDetectionStrategies:
    name:
      CSharp:
      - name: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
        nameWithType: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
        qualifiedName: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
      VB:
      - name: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
        nameWithType: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
        qualifiedName: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
    isDefinition: true
    commentId: N:Microsoft.Services.Core.Retries.ErrorDetectionStrategies
  Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy
        name: ITransientErrorDetectionStrategy
        nameWithType: ITransientErrorDetectionStrategy
        qualifiedName: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy
      VB:
      - id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy
        name: ITransientErrorDetectionStrategy
        nameWithType: ITransientErrorDetectionStrategy
        qualifiedName: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy
    isDefinition: true
    parent: Microsoft.Services.Core.Retries.ErrorDetectionStrategies
    commentId: T:Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy
  Microsoft.Services.Core.Retries.RetryStrategies:
    name:
      CSharp:
      - name: Microsoft.Services.Core.Retries.RetryStrategies
        nameWithType: Microsoft.Services.Core.Retries.RetryStrategies
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies
      VB:
      - name: Microsoft.Services.Core.Retries.RetryStrategies
        nameWithType: Microsoft.Services.Core.Retries.RetryStrategies
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies
    isDefinition: true
    commentId: N:Microsoft.Services.Core.Retries.RetryStrategies
  Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
        name: RetryStrategy
        nameWithType: RetryStrategy
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
      VB:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
        name: RetryStrategy
        nameWithType: RetryStrategy
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
    isDefinition: true
    parent: Microsoft.Services.Core.Retries.RetryStrategies
    commentId: T:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
  System.EventHandler`1:
    name:
      CSharp:
      - id: System.EventHandler`1
        name: EventHandler
        nameWithType: EventHandler
        qualifiedName: System.EventHandler
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TEventArgs
        nameWithType: TEventArgs
        qualifiedName: TEventArgs
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.EventHandler`1
        name: EventHandler
        nameWithType: EventHandler
        qualifiedName: System.EventHandler
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TEventArgs
        nameWithType: TEventArgs
        qualifiedName: TEventArgs
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.EventHandler`1
  System.EventHandler{Microsoft.Services.Core.Retries.RetryingEventArgs}:
    name:
      CSharp:
      - id: System.EventHandler`1
        name: EventHandler
        nameWithType: EventHandler
        qualifiedName: System.EventHandler
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Microsoft.Services.Core.Retries.RetryingEventArgs
        name: RetryingEventArgs
        nameWithType: RetryingEventArgs
        qualifiedName: Microsoft.Services.Core.Retries.RetryingEventArgs
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.EventHandler`1
        name: EventHandler
        nameWithType: EventHandler
        qualifiedName: System.EventHandler
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Microsoft.Services.Core.Retries.RetryingEventArgs
        name: RetryingEventArgs
        nameWithType: RetryingEventArgs
        qualifiedName: Microsoft.Services.Core.Retries.RetryingEventArgs
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.EventHandler`1
    parent: System
    commentId: T:System.EventHandler{Microsoft.Services.Core.Retries.RetryingEventArgs}
  System.Action:
    name:
      CSharp:
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      VB:
      - id: System.Action
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Action
  System.Threading:
    name:
      CSharp:
      - name: System.Threading
        nameWithType: System.Threading
        qualifiedName: System.Threading
      VB:
      - name: System.Threading
        nameWithType: System.Threading
        qualifiedName: System.Threading
    isDefinition: true
    commentId: N:System.Threading
  System.Threading.CancellationToken:
    name:
      CSharp:
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
      VB:
      - id: System.Threading.CancellationToken
        name: CancellationToken
        nameWithType: CancellationToken
        qualifiedName: System.Threading.CancellationToken
        isExternal: true
    isDefinition: true
    parent: System.Threading
    commentId: T:System.Threading.CancellationToken
  TResult:
    name:
      CSharp:
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      VB:
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
    isDefinition: true
    commentId: '!:TResult'
  '{TResult}':
    name:
      CSharp:
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      VB:
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
    isDefinition: false
    definition: TResult
    commentId: '!:TResult'
  System.Func`1:
    name:
      CSharp:
      - id: System.Func`1
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Func`1
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Func`1
  System.Func{{TResult}}:
    name:
      CSharp:
      - id: System.Func`1
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Func`1
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Func`1
    parent: System
    commentId: T:System.Func{``0}
  System.Threading.Tasks:
    name:
      CSharp:
      - name: System.Threading.Tasks
        nameWithType: System.Threading.Tasks
        qualifiedName: System.Threading.Tasks
      VB:
      - name: System.Threading.Tasks
        nameWithType: System.Threading.Tasks
        qualifiedName: System.Threading.Tasks
    isDefinition: true
    commentId: N:System.Threading.Tasks
  System.Threading.Tasks.Task:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      VB:
      - id: System.Threading.Tasks.Task
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
    isDefinition: true
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task
  System.Func{System.Threading.Tasks.Task}:
    name:
      CSharp:
      - id: System.Func`1
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Threading.Tasks.Task
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Func`1
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Threading.Tasks.Task
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Func`1
    parent: System
    commentId: T:System.Func{System.Threading.Tasks.Task}
  System.Threading.Tasks.Task`1:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Threading.Tasks.Task`1
  System.Threading.Tasks.Task{{TResult}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{``0}
  System.Func{System.Threading.Tasks.Task{{TResult}}}:
    name:
      CSharp:
      - id: System.Func`1
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Func`1
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Func`1
    parent: System
    commentId: T:System.Func{System.Threading.Tasks.Task{``0}}
  Microsoft.Services.Core.Retries.RetryPolicy:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.RetryPolicy
        name: RetryPolicy
        nameWithType: RetryPolicy
        qualifiedName: Microsoft.Services.Core.Retries.RetryPolicy
      VB:
      - id: Microsoft.Services.Core.Retries.RetryPolicy
        name: RetryPolicy
        nameWithType: RetryPolicy
        qualifiedName: Microsoft.Services.Core.Retries.RetryPolicy
    isDefinition: true
    commentId: T:Microsoft.Services.Core.Retries.RetryPolicy
  Microsoft.Services.Core.Retries.ShouldRetry:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.ShouldRetry
        name: ShouldRetry
        nameWithType: ShouldRetry
        qualifiedName: Microsoft.Services.Core.Retries.ShouldRetry
      VB:
      - id: Microsoft.Services.Core.Retries.ShouldRetry
        name: ShouldRetry
        nameWithType: ShouldRetry
        qualifiedName: Microsoft.Services.Core.Retries.ShouldRetry
    isDefinition: true
    parent: Microsoft.Services.Core.Retries
    commentId: T:Microsoft.Services.Core.Retries.ShouldRetry
  Microsoft.Services.Core.Retries:
    name:
      CSharp:
      - name: Microsoft.Services.Core.Retries
        nameWithType: Microsoft.Services.Core.Retries
        qualifiedName: Microsoft.Services.Core.Retries
      VB:
      - name: Microsoft.Services.Core.Retries
        nameWithType: Microsoft.Services.Core.Retries
        qualifiedName: Microsoft.Services.Core.Retries
    isDefinition: true
    commentId: N:Microsoft.Services.Core.Retries
  Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.IsTransient(System.Exception):
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.IsTransient(System.Exception)
        name: IsTransient
        nameWithType: ITransientErrorDetectionStrategy.IsTransient
        qualifiedName: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.IsTransient
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.IsTransient(System.Exception)
        name: IsTransient
        nameWithType: ITransientErrorDetectionStrategy.IsTransient
        qualifiedName: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.IsTransient
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy
    commentId: M:Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.IsTransient(System.Exception)
  Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.GetExtendedDetails(System.Exception):
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.GetExtendedDetails(System.Exception)
        name: GetExtendedDetails
        nameWithType: ITransientErrorDetectionStrategy.GetExtendedDetails
        qualifiedName: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.GetExtendedDetails
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.GetExtendedDetails(System.Exception)
        name: GetExtendedDetails
        nameWithType: ITransientErrorDetectionStrategy.GetExtendedDetails
        qualifiedName: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.GetExtendedDetails
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy
    commentId: M:Microsoft.Services.Core.Retries.ErrorDetectionStrategies.ITransientErrorDetectionStrategy.GetExtendedDetails(System.Exception)
  Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy
        name: AllExceptionsAreTransientErrorDetectionStrategy
        nameWithType: AllExceptionsAreTransientErrorDetectionStrategy
        qualifiedName: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy
      VB:
      - id: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy
        name: AllExceptionsAreTransientErrorDetectionStrategy
        nameWithType: AllExceptionsAreTransientErrorDetectionStrategy
        qualifiedName: Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy
    isDefinition: true
    commentId: T:Microsoft.Services.Core.Retries.ErrorDetectionStrategies.AllExceptionsAreTransientErrorDetectionStrategy
  System.SerializableAttribute:
    name:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.SerializableAttribute
  System.SerializableAttribute.#ctor:
    name:
      CSharp:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.SerializableAttribute
    commentId: M:System.SerializableAttribute.#ctor
  Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientRetryCount:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientRetryCount
        name: DefaultClientRetryCount
        nameWithType: RetryStrategy.DefaultClientRetryCount
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientRetryCount
      VB:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientRetryCount
        name: DefaultClientRetryCount
        nameWithType: RetryStrategy.DefaultClientRetryCount
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientRetryCount
    isDefinition: true
    parent: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
    commentId: F:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientRetryCount
  Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientBackoff:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientBackoff
        name: DefaultClientBackoff
        nameWithType: RetryStrategy.DefaultClientBackoff
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientBackoff
      VB:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientBackoff
        name: DefaultClientBackoff
        nameWithType: RetryStrategy.DefaultClientBackoff
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientBackoff
    isDefinition: true
    parent: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
    commentId: F:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultClientBackoff
  Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMaxBackoff:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMaxBackoff
        name: DefaultMaxBackoff
        nameWithType: RetryStrategy.DefaultMaxBackoff
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMaxBackoff
      VB:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMaxBackoff
        name: DefaultMaxBackoff
        nameWithType: RetryStrategy.DefaultMaxBackoff
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMaxBackoff
    isDefinition: true
    parent: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
    commentId: F:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMaxBackoff
  Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMinBackoff:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMinBackoff
        name: DefaultMinBackoff
        nameWithType: RetryStrategy.DefaultMinBackoff
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMinBackoff
      VB:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMinBackoff
        name: DefaultMinBackoff
        nameWithType: RetryStrategy.DefaultMinBackoff
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMinBackoff
    isDefinition: true
    parent: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
    commentId: F:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultMinBackoff
  Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultRetryInterval:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultRetryInterval
        name: DefaultRetryInterval
        nameWithType: RetryStrategy.DefaultRetryInterval
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultRetryInterval
      VB:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultRetryInterval
        name: DefaultRetryInterval
        nameWithType: RetryStrategy.DefaultRetryInterval
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultRetryInterval
    isDefinition: true
    parent: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
    commentId: F:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.DefaultRetryInterval
  Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.MaxRetryCount:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.MaxRetryCount
        name: MaxRetryCount
        nameWithType: RetryStrategy.MaxRetryCount
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.MaxRetryCount
      VB:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.MaxRetryCount
        name: MaxRetryCount
        nameWithType: RetryStrategy.MaxRetryCount
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.MaxRetryCount
    isDefinition: true
    parent: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
    commentId: P:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.MaxRetryCount
  Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.GetShouldRetry:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.GetShouldRetry
        name: GetShouldRetry
        nameWithType: RetryStrategy.GetShouldRetry
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.GetShouldRetry
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.GetShouldRetry
        name: GetShouldRetry
        nameWithType: RetryStrategy.GetShouldRetry
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.GetShouldRetry
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy
    commentId: M:Microsoft.Services.Core.Retries.RetryStrategies.RetryStrategy.GetShouldRetry
  Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff:
    name:
      CSharp:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff
        name: ExponentialBackoff
        nameWithType: ExponentialBackoff
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff
      VB:
      - id: Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff
        name: ExponentialBackoff
        nameWithType: ExponentialBackoff
        qualifiedName: Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff
    isDefinition: true
    commentId: T:Microsoft.Services.Core.Retries.RetryStrategies.ExponentialBackoff
